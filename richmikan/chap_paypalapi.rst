PayPal APIの章 ― curlコマンドでWeb APIを叩け
======================================================================

注文が成立したら、あとは決済を待つのみ。
しかし、ここが我々組織の資金源になるわけだから丁重に扱わねばならぬ。
「銀行振込」という決済手段も用意はしているが、やはりクレジットカード決済に対応していると有難い。
というわけでシェルショッカー1号は世界的クレジットカード決済代行業者であるPayPalにも対応しているが、
この章では最後にその部分を解説してやる。

PayPalではの支払い手順は?
----------------------------------------------------------------------

プログラムの解説をする前に、PayPalを利用した支払い手順を教えておかねばなるまいな。

PayPalにはいくつかの支払い方式が用意されているのだが、
最近標準のエクスプレスチェックアウトという方法を選択した。
他に代表的なものとして、昔からある方式のウェブペイメントスタンダードというのがあるが、
古臭くて面倒で、最近の主流ではないらしい。

というわけで、エクスプレスチェックアウトの手順を説明する。

第一段階、SetExpressCheckoutで整理番号をもらう
``````````````````````````````````````````````````````````````````````

まずは最初の図を見よ。

.. figure:: images/SetExpressCheckout_outlined.eps
   :width: 141mm

   エクスプレスチェックアウトの手順(1)

エクスプレスチェックアウトのAPIは2つ [#expco_3step]_ ある。
最初にSetExpressCheckoutというAPIを呼び出さなければならない。
これは何のためかというと、「何という商品が購入されて、いくら請求するのか」という情報を
PayPalに伝えるためのものだ。
顧客が注文番号を伝えてくれば、その人が何を買ったか当然ショッピングカートプログラムは覚えているので、
その情報を添えてAPIを叩くと言うわけだ。

するとそのAPIは整理番号(トークンID)を返してくる。
その整理番号を顧客に伝え、PayPal決済サイトへ誘導する。

これが最初の作業であり、シェルショッカー1号でこの部分を担当しているのがCGI/PAYPAY1.CGIである。

.. rubric::

.. [#expco_3step] 本当は3つあるのだが、中間の1つは使わなくても済むので使っていない。


第二段階、顧客の決済を待つ
``````````````````````````````````````````````````````````````````````

次は、顧客のターンだ。二番目の図を見よ。

.. figure:: images/pay_at_PayPal_site_outlined.eps

   エクスプレスチェックアウトの手順(2)

ここは、顧客とPayPayサイト間のやりとりなのでシェルショッカー1号の出番は無い。
顧客がカード番号を入力し、決済を済ませて帰ってくるのを待つだけだ。

ちなみに帰り先のURLというのは、先程のSetExpressCheckoutで指定しておく。
すると決済完了後に、PayPalサイトが顧客をそこへリダイレクトしてくれる。

第三段階、支払いの確認をする
``````````````````````````````````````````````````````````````````````

顧客が決済を済ませて戻ってきたら、
シェルショッカー1号は本当に支払いが行われたのかをPayPalに問い合わせなければならない。
次は、三番目の図を見よ。

.. figure:: images/DoExpressCheckout_outlined.eps
   :width: 141mm

   エクスプレスチェックアウトの手順(3)

支払いはPalPayサイト上で行われていたので、こちらとしてはPayPalに聞かないとわからないからだ。
その時に使うのがDoExpressCheckoutというAPIだ。
整理番号(トークンID)を渡たせば決済の成否が照会され、結果を知ることができる。
ちなみに、PayPalはこのAPIが呼び出された時点で、顧客のクレジットカードからの引き落とし手続きを始める。

このようにして、支払いが確かめられたらあとは顧客にお礼のメッセージを出して完了だ。
もし売り物が電子商品だったら、この時点でダウンロードさせる処理を動かせばよい。

シェルショッカー1号でこの部分を担当しているのはCGI/PAYPAY2.CGIである。


APIはどういうふうに呼び出すのか
----------------------------------------------------------------------

全体の流れが分かったら、次は具体的なAPIの呼び出し方だ。

仕組みは簡単で、単にHTTP POSTメソッドでPayPalと情報をやりとりするだけだ。
その情報も、CGI変数のフォーマット( ``a=1&b=2&...`` というアレ)で行われるので、
そのフォーマットへのエンコード、そしてデコードができればよい。

まとめると次の図のようになる。

.. figure:: images/PayPal_API_seq_outlined.eps
   :width: 141mm
   :scale: 50

   PayPal APIの呼び出し方

もちろん、文字列のエンコード・デコードだけでよいわけではなくて、
PayPalにHTTPで通信しなければならない。
しかしそこはcurlコマンドに任せれば解決だ。

エンコードしたCGI変数を標準出力経由でcurlに渡し、
レスポンスをcurlから標準入力で受け取り、デコードするのだ。

APIで与え、受け取る変数
``````````````````````````````````````````````````````````````````````

具体的に何という変数名を送受信するのかについて知りたくば、PayPalの公式資料を見よ。
SetExpressCheckoutとかDoExpressCheckoutでWeb検索すれば辿り着く。
よーく探せば日本語資料もあるが、まぁ参考程度にな。

簡単に紹介しておくと、変数は大きく3種類に分類できる。

* APIを利用するための情報（ID、パスワード、言語など）
* 購入商品に関する情報（商品名、単価、数量など）
* 顧客情報（名前、住所、電話番号など）

そして、実際の使用例を知りたくばCGI/PAYPAY1.CGI、CGI/PAYPAY2.CGIを飽きるまで見るがいい。


実際のコード
----------------------------------------------------------------------

というわけで、実際のコードを紹介しよう。
SetExpressCheckoutを呼び出している、CGI/PAYPAL1.CGIの中を掻い摘んで掲載する。

CGI/PAYPAL1.CGIのコード(抜粋)
``````````````````````````````````````````````````````````````````````

.. code-block:: bash

	    :
	cat <<-SETEXPCO_DATA > $Tmp-setexpco_data0                             ←334行目あたり
	  METHOD                         SetExpressCheckout  # APIの名前(第一段階=SetExpressCheckout)
	  VERSION                        $PP_VERSION         # 利用するExpressCheckoutのバージョン番号
	  LOCALECODE                     $PP_LOCALECODE      # 地域(国)コード
	  USER                           $PP_USER            # APIを利用するユーザーのID
	  PWD                            $PP_PASSWD          #  ↑パスワード
	  SIGNATURE                      $PP_SIGNATURE       #  ↑署名
	    :
	SETEXPCO_DATA
	    :
	
	    :
	# 4)データを送信する                                                   ←406行目あたり
	cat $Tmp-setexpco_data0 $Tmp-ppreceipt $Tmp-shipping  |
	env - sed 's/^#.*$//'                                 | # コメント除去1
	env - sed 's/[[:blank:]]\{1,\}#.*$//'                 | # コメント除去2
	grep -v '^[[:blank:]]*$'                              | # 空行除去
	sed 's/^\([^[:blank:]]\{1,\}\)[[:blank:]]\{1,\}/\1 /' |
	mkcgipost                                             |
	curl -d @- $PP_URL_API                                > $Tmp-setexpco_ret
	    :
	# --- PayPal APIレスポンスからトークンを取り出す --------------------- ←438行目あたり
	token=$(cgi-name $Tmp-setexpco_ret |
	        nameread TOKEN             |
	        sed 's/[^A-Za-z0-9_.-]//g' )
	    :
	# --- お客様をPayPal決済ページへ案内する ----------------------------- ←453行目あたり
	cat <<-HTTP
	  Status: 303 See Other
	  Location: ${PP_URL_SETTLEMENT_BASE}&token=$token
	  Content-Type: text/plain

	  Redirect to PayPay site...
	HTTP


最初に、PayPalに送るためのCGI変数生成する。上記コードではヒアドキュメントを使って、一旦スペース区切りのkey-value形式を生成し
後でまとめて、CGI変数フォーマットに変換することにしている。
変数は大きく3種類に分類できると言ったが、上記抜粋コードはそのうちの「APIを利用するための情報」のパートを生成している。

その後、curlを渡す直前でCGI変数フォーマット( ``a=1&b=2&...`` )に変換している。
この中でmkcgipostという見慣れないコマンドが出てきているが、これは我々自作のものだ。
UTL/mkcgipostを見ればわかるが、AWKを使って生成している。
このコマンドの中にはfor文やif文が何度も出てくるが、
このようにしてforやifといった制御構文が避けられない作業かつ汎用的な作業はなるべくコマンド化して、
メインとなるシェルスクリプト(PAYPAL1.CGI)はスッキリさせることを心掛けている。

curlの実行後、標準出力から整理番号としてトークンIDが渡ってくるので
Tukubaiのcgi-nameコマンドを使い、これをtokenという変数に格納する。

そして最後に、そのトークンIDを添えながら顧客(Webブラウザー)をPayPalサイトへリダイレクトするというわけだ。