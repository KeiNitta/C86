『侵略型』シェルスクリプト製ショッピングカートを作るのだ!
======================================================================

さて今回、我々が何を開発したかといえば、それはショッピングカートである。
我々が多数書き溜めた、シェルショッカーの掟 [#coterie]_ をはじめとした同人誌、
同人グッスをネット販売し、世界征服を図るというわけだ。

実物が見たいか? いいだろう、先に次章を読んでも構わんぞ。

.. [#coterie]             この節の最後に掲載しておいたので読むがいい!


なぜ今さら自作? しかもシェルスクリプトで……
----------------------------------------------------------------------

「それにしても今さらなんでわざわざ自分で作る?」と思うことだろう。しかもシェルスクリプトで。
それは既存のショッピングカートでは、我らの壮大なる世界征服の野望を実現するには機能が足りないからなのだよ。
次節で述べるが、特に、他のWebサイトを侵略する機能が既存のカートには無いのでな!
「無ければ自分で作る」しかない。そうするときっとお前たちは、「わざわざ一から作るなんて大変だし……」と及び腰になるだろう。

しかしそれは、高級言語へ依存した考えがあるからこそ生まれるのだよ。
シェルスクリプトを使えば、いつも使っている *書き捨てワンライナー* と同様に書ける。
つまり、さっさと作れるということだ。

ウソだと思うなら4章以降で紹介するソースコードを一度サーっと眺めてみるがいい。
それらの殆どが、UNIXコマンドをパイプで繋いだ普通のワンライナーをつらつらと貼っただけの姿をしていることがわかるはずだ。
if文やfor、while文もなるべく使わんし、ましてや関数(シェル関数)は唯一の例外 [#shellfunc_exception]_ を除いて一切使っておらん。
そうすることで **「ソースコードを上から下へ素直に読める」** ようにしているのが特徴だ。

.. [#shellfunc_exception] 唯一の例外とは、エラー判定時に以降の処理を中断するためにだけシェル関数を作る点だ。これはパイプにデータを流し、途中途中のコマンドは、不良と判断した部分を/dev/stderrに弾き出しはすれどその先の始末に関与しないという、データ処理モデルを参考にしておる。


上から下へ素直に読める
``````````````````````````````````````````````````````````````````````

「goto文は使うな」と言っている奴らはたくさんいるが、
if, for, while, 関数といった分岐・ループ構文は、当たり前のように使っておる。
そもそもgoto文を使わないのは、プログラムの読み手が、あっちの行、そっちのファイル、と
いろいろな箇所を読み回さなければならぬスパゲティー化を防ぎたいからではなかったのか!
gotoを使わなくたって、こういう記述を使ったら同じことだ。

上から下に素直に読めればとても都合がいい。理解も早いし、確認も楽だ。
プログラムに限らず、例えば「イー!イー!」と言ってる我組織の下っ端工作員どもを教育するための手順書も当然そうなっている。
工作員達に侵略工作の手順を教える時、もしその指示書に「if」とか「for」とか「別紙参照」といったことが頻繁に書いてあったら
工作は失敗するだろう。我々幹部と違って、あいつらはそんなに賢くないからな。

ゲル○ョッカーとやらが壊滅したのは、手順書にifとかforみたいな複雑な指示があったからに違いない。
ククッ、愚かな奴らだ。

コマンドを駆使すれば分岐・ループ構文は消せる
``````````````````````````````````````````````````````````````````````

では、どうやって分岐・ループ構文を無くすか。それはいかにコマンドを駆使するかにかかっている。

例えば、お前たちはこういう作業をどうやってこなす?

	01から99までのディレクトリーを作れ。

恐らくこんな感じではあるまいか?

.. code-block:: bash

	i=1
	while [ $i -le 100 ]; do
	  filename=$(printf '%02d' $i)
	  mkdir $filename
	  i=$((i+1))
	done


これではシェルスクリプトを使ってもあまり意味はないのだよ。
コマンドを活用するのだ!

.. code-block:: bash

	seq 0 99               |
	awk '{printf("%02d")}' |
	xargs mkdir


どうだ、ループが消えて単純化できただろう。コードが減って、書くのも早い。
コツは、始めから完成データを作ることをイメージするのではなく、
素朴な元データを用意して、それを徐々に徐々に完成品へと変化させていくようにイメージすることだ。パイプとコマンドを駆使してな。
ちなみに、この例でseqコマンドとAWKコマンドまとめて、1つのAWKコマンドにしてはダメだ。
それではAWKの中にfor文が復活してしまう。
なるべくコマンドの中に、条件分岐やループ文的な処理を閉じ込めてしまうのだ。

もしxargsコマンドを知らなかったとしても、まだこっちの方がマシだ。

.. code-block:: bash

	mkdir 00 01 02 03 04 05 06 07 08 09
	mkdir 10 11 12 13 14 15 16 17 18 19
	mkdir 20 21 22 23 24 25 26 27 28 29
	mkdir 30 31 32 33 34 35 36 37 38 39
	mkdir 40 41 42 43 44 45 46 47 48 49
	mkdir 50 51 52 53 54 55 56 57 58 59
	mkdir 60 61 62 63 64 65 66 67 68 69
	mkdir 70 71 72 73 74 75 76 77 78 79
	mkdir 80 81 82 83 84 85 86 87 88 89
	mkdir 90 91 92 93 94 95 96 97 98 99


文字の量は増えたが、大半がコピペで済むので実質的な打ち込み量は少ないし、
単純作業の繰り返しなので理解も早い。

コマンドを駆使していかに単純に書くか。知らないなら知ってる範囲でいかに単純に書くか。
そっちの方がよっぽど重要だ。下っ端工作員を引き連れて、敵が息つく間もなく侵略を完了するにはな。

自作アプリならやりたい放題、カートを侵略型にするのも訳ない
----------------------------------------------------------------------

既存のショッピングカートを使わないのは、我々の世界征服を実現するのに必要な機能が無いからだと先程言った。
その必要な機能とは何か。それは、 **世界中のWebページを我々のショッピングサイトに改造してしまう** という機能だ!!!

世界に支部を持つ我々と言えど、ショッピングサイトを我々のサイトだけでやっていてはちっとも効率が上がらん。
そこでだ。世界中のWebページを改造し、それらを皆我々のショッピングサイトにできるとしたら……、フッフッフ、背筋が凍るだろう。
そんな機能を仕込むことだって自作ならどうということはない。

ではどういう独自機能を持たせたか、一つ一つ教えてやろう。

『侵略型』ショッピングカートにする
``````````````````````````````````````````````````````````````````````

ショッピングカートアプリといえば、商品を紹介するページの生成まで面倒を見るものが殆どだ。
しかし、このアプリはそんな **商品紹介ページ生成機能をバッサリ捨てた。**
全ての商品紹介ページがテンプレートにハマりはしない。特殊な商品だってあるだろう。
それにキャンペーンをやりたかったらどうする? キャンペーン用のテンプレを1つ1つ用意するか? バカバカしい! プログラムが肥大化するだけだ。
そもそも、プログラマーの用意したテンプレで済むような商品紹介しかやらない店が流行るわけがない。

だから、

* 商品紹介ページ作成は、HTMLやblogなどのCMSでやりたい放題勝手にやれ!
* そこに「カゴに入れる」ボタンを付け、ショッピングサイトに改造してやる!

という戦略をとることにした。そうやって、ただのWebページを侵略していくのだ。
JavaScriptが自由に組めるページならどこでも改造できる。
詳細は次章で述べてやる。我々が改造してやったサイトと共にな。

単品売りとセット売りで在庫を共通化
``````````````````````````````````````````````````````````````````````

例えば、毎月発行される我々秘密結社の会報誌があったとしよう。
毎号の単品売りと、そして値段のオトクな1年分セット売りを用意したい。
ただし1年分セットも、結局は各号の在庫を取り崩すので、
1年分セットの注文1つが入ったら各号の在庫を1つずつ減らすということがしたい。

が、こういうことができるショッピングカートが見当たらなかった。

緻密な送料計算
``````````````````````````````````````````````````````````````````````

送料計算も不満だった。
重さで料金の決まる運送サービスもあれば、体積(本の場合「厚み」)で決まるサービスもある。
ある注文があった時に、どのサービスを使うのが一番トクで料金はいくらなのか正確に知りたかった。

それに「シェルショッカー会報誌2014年発行分セット」という商品があって、注文日が2014年5月だったとしよう。
すると1月～5月分はまとめて送れるが、6月分以降は次月から1部ずつ毎月送らねばならない。
こういう場合の送料計算をやってくれるショッピングカートというのも見当たらなかった。

シェルショッカーの掟
----------------------------------------------------------------------

他にもいくつかあるが、主な理由はだいたいこんなところだ。

おっと忘れるところだった。本章の最後に、我々シェルショッカーの9つの掟を教えてやる。

この掟を布教するための同人誌や同人グッズを売るのが我々の目的である。
邪魔するものは全て ``rm -rf`` だ! ワッハッハッ。

1. 命令通りに動かぬコードは、 ``rm -rf`` 。
2. 他言語に負けたコードは、 ``rm -rf`` 。
3. 任務に失敗したコードは、 ``rm -rf`` 。
4. 平和な環境でしか使えぬコードは、 ``rm -rf`` 。
5. 性善説で書かれたコードは、 ``rm -rf`` 。
6. 建設的に怠けぬコードは、 ``rm -rf`` 。
7. 遅いコードは、 ``rm -rf`` 。
8. バグ・破損コードは、 ``rm -rf`` 。
9. 親子・兄弟プロセスも正常動作のためには、 ``kill -9`` 。

仮面○イダーとかいう架空のヒーローが倒す組織ゲ○ショッカーの掟ではない! 断じて違う。
