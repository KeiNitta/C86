**********************************************************************
コマンド活かせば言語は要らぬ！「シェルスクリプト Webアプリ『即席』作成術」
**********************************************************************


全世界60億人達よ、ごきげんよう。
私は秘密結社シェルショッカー [#about_shellshoccar]_ 日本支部のリッチー将軍である。

これまでアノ、シェルスクリプト総合誌を支持し、
そして *エクストリームシェルスクリプト* に洗脳されてくれてありがとう。
とても感謝している。

今日は、お前たちをより深いエクストリームシェルスクリプトの世界に引きずり込むべく、
我シェルショッカー日本支部が密かに開発した *とあるWebアプリ* を披露しよう。

UNIXコマンドを使い倒せば、PerlだPHPだRubyだPythonだJavaだ、それにSQLだ、
そんなもの一切使わずに、サクッと、まさに「書き捨てるように」Webアプリが作れてしまうことに、
「一生懸命言語の文法覚えて、書いてきたあの苦労は一体何だったんだ……」
と途方に暮れるかもしれんぞ。

さぁこれを読んで、エクストリームシェルスクリプトに、
より深く洗脳され、そして我々の世界征服を手伝うがいい。わっはっは!

.. rubric:: 脚注

.. [#about_shellshoccar] 仮面○イダーとかいう架空のヒーローが出てくる物語のゲ○ショッカーではない！断じて違う。我々は壊滅などしない。


シェルスクリプト製ショッピングカートを作るのだ
======================================================================

さて今回、我々が何を開発したかといえば、それはショッピングカートである。
我々が多数書き溜めた、シェルショッカーの掟 [#coterie]_ をはじめとした同人誌、
同人グッスをネット販売し、世界征服を図るというわけだ。

よりによって、なんでシェルスクリプトなんだ!?
----------------------------------------------------------------------

こう言うと「今更なんでわざわざ自分で作る?」と思うかもしれない。しかもシェルスクリプトで。
それは既存のショッピングカートでは、我らの壮大なる世界征服の野望を実現するには機能が足りないからなのだよ。
「無ければ自分で作る」が、自明の理であるが、言語を使うことが前提だと
「わざわざ一から作るなんて大変だし……」と及び腰になることだろう。

しかし、それは高級言語への依存した考えがあるからこそ生まれるのだ。
シェルスクリプトを使えば、いつも使っている *書き捨てワンライナー* と同様に書ける。
つまり、さっさと作れるということだ。

ウソだと思うならこの後紹介するソースコードを一度サーっと眺めてみるがいい。
ほとんどが、UNIXコマンドをパイプで繋いだ普通のワンライナーを、
つらつらと貼っただけの姿をしているだろう。
if文やfor、while文、ましてや関数(シェル関数)はできる限り使っておらん。
そうすることで **「ソースコードを上から下へ素直に読める」** ようになっているのが特徴だ。

上から下へ素直に読める
``````````````````````````````````````````````````````````````````````

「goto文は使うな」と言っている一方で、
普通のプログラムでは当たり前のようにif, for, while, 関数といったものを使う。
そもそもgoto文を使わないのは、プログラムを読む者があっち行、そっちのファイル、と
いろいろなところを読み回さなければならぬスパゲティー化を防ぎたいからではなかったのか。
gotoを使わなくたって、それらを使ったら同じことだ。

上から下に素直に読めればとても都合がいい。理解も早いし、確認も楽だ。
プログラムに限らず、例えば「イー!イー!」言ってる我組織の下っ端工作員どもを教育するための手順書も当然そうなっている。
工作員達に侵略工作の手順を教える時、もしその指示書に「if」とか「for」とか「別紙参照」とか書いてあったら
工作は失敗する。我々幹部と違って、あいつらはそんなに賢くないからな。

仮面ラ○ダーのゲル○ョッカーとやらが壊滅したのは、
工作指示書にifとかforみたいな複雑な指示があったからに違いない。ククッ、愚かなやつらだ。

コマンドを駆使すれば分岐は消せる
``````````````````````````````````````````````````````````````````````

では、どうやって分岐を無くすか。それはいかにコマンドを駆使するかにかかっている。

例えば、諸君はこういう手順をどうやってこなす?

	01から99までのディレクトリーを作れ。

恐らくこんな感じではあるまいか?

.. code-block:: bash
	:linenos:

	i=1
	while [ $i -le 100 ]; do
	  filename=$(printf '%03d' $i)
	  mkdir $filename
	  i=$((i+1))
	done


これでは、シェルスクリプトを使ってもあまり意味はないのだよ。
コマンドを活用するのだ。

.. code-block:: bash
	:linenos:

	seq 0 99               |
	awk '{printf("%02d")}' |
	xargs mkdir


どうだ、分岐が消えて単純化できただろう。コードが減って、書くのも早い。
コツは、始めから完成データを作ることをイメージするのではなく、
素朴な元データを用意して、パイプとコマンドを駆使して、
それを徐々に徐々に完成品に変化させていくようにイメージすることだ。
ちなみに、この例でseqコマンドとAWKコマンドまとめ、1つのAWKコマンドにしてはダメだ。
それではAWKの中にfor文が復活してしまう。
なるべくコマンドの中に、条件文やループ文的な処理を閉じ込めてしまうのだ。

ところでもしxargsコマンドを知らないんだったら、まだこっちの方がマシだ。

.. code-block:: bash
	:linenos:

	mkdir 00 01 02 03 04 05 06 07 08 09
	mkdir 10 11 12 13 14 15 16 17 18 19
	mkdir 20 21 22 23 24 25 26 27 28 29
	mkdir 30 31 32 33 34 35 36 37 38 39
	mkdir 40 41 42 43 44 45 46 47 48 49
	mkdir 50 51 52 53 54 55 56 57 58 59
	mkdir 60 61 62 63 64 65 66 67 68 69
	mkdir 70 71 72 73 74 75 76 77 78 79
	mkdir 80 81 82 83 84 85 86 87 88 89
	mkdir 90 91 92 93 94 95 96 97 98 99


文字の量は増えたが、大半がコピペで済むので実質的な打ち込み量は少ないし、
単純作業の繰り返しなので理解も早い。

コマンドを駆使していかに単純に書くか。知らないなら知ってる範囲でいかに単純に書くか。
そっちの方がよっぽど重要だ。下っ端工作品を引き連れて、敵が息つく間もなく侵略をするにはな。

自作アプリならやりたい放題、世界征服も思いのまま
----------------------------------------------------------------------

これは余談だが、既存のショッピングカートを使わないのは、我々の世界征服を実現するのに必要な機能が無いからだと先程言った。
その必要な機能とは何か。それは、世界中のWebページを我々のショッピングサイトに改造してしまうという機能だ!!!

世界に支部を持つ我々と言えど、ショッピングサイトを我々のサイトだけでやっていてはちっとも効率が上がらん。
そこでだ。世界中のWebページを改造し、それらを皆我々のショッピングサイトにできるとしたら……、
フッフッフ、背筋が凍る思いだろう。そんな機能を仕込むことだってどうということはない。

秘密はサードパーティーCookie
``````````````````````````````````````````````````````````````````````

諸君らは、 *サードパーティーCookie* を知っているか? 例えこの言葉を聞いてことが無くても、この技術がもたらす恐るべき洗脳工作は体験しているはずだ。

例えば、あるショッピングサイトで人には知られたくない萌え萌えフィギュアを買った、あるいは買おうとしたけど思いとどまってやめたとしよう。
この時すでに恐るべき洗脳工作は始まっているのだ。
その後諸君が全く関係無いサイトを訪れても、訪れたサイトに広告スペースがあると
その全く同じ萌え萌えフィギュアの広告が、まるで罰ゲームのように表示されるのだ。
買ってないならまだしも、例え買っても全く同じもの広告されるのだから、罰ゲームとしか言いようがない [#ad_batsu_game]_ 。
この工作で用いられているのが、サードパーティーCookieという機能だ。

仕組みはこうだ。
まず、ターゲットのA氏がショッピングサイトBで買い物なり物色をする。
すると大抵諸君のWebブラウザーは、サイトBから諸君を特定するためのCookieを喰わされることになる。
そこまではまぁいいのだが、

その後、何にも関係無いサイトCを訪れた時、サイトCを見ている裏で、
A氏のWebブラウザーはサイトBにCookieを送らされるのだ。
すると、A氏の購入履歴や物色履歴を知っているサイトBは、
購入あるいは物色した商品をサイトCの広告欄に表示するというわけだ。

このように、今訪れているサイトとは別のサイトとやりとりするCookieのことを
サードパーティーCookieという。

世界中のサイトにカゴ入れボタンを仕込む
``````````````````````````````````````````````````````````````````````

さて、ここまでの話を聞いて我々の意図が汲み取れたかな?
そう! 我々のショッピングカートの買い物カゴCookieを、世界中のサイトで共有させてしてしまうのだ。
我々の組織とは全く関係無いブログページに置かれたナゾの買い物ボタン……。
そのブログサイトの常連の読者A君。「あれ、この人商売始めたのかな?」と思いつつも、
ブログ記事に感銘を受けてついつい「買い物かごに入れる」ボタンをポチリ。
その瞬間、我々が用意した真のショピングサイトと裏でAjax通信を始め、
シェルショッカーの買い物カゴに紐付けられたCookieを喰わされる。

そのことに気付かずあとはそのブログ閲覧者がレジへ移動して、ポチる(購入する)のを待つばかり。
このようにして、世のWebページを侵略しながらじわりじわりと世界を征服していくのだ。

何、「どうやってブログ開設者にボタンを設置させるか」だって?
そのためにエクストリームシェルスクリプトの世界を築き上げてきたのだ。
今回、ショッピングカートをシェルスクリプトで組むという
誰もがあっけにとられる活動を披露することで
まずは諸君が洗脳されるというわけだ。
この本を手にした以上、もう後戻りはできん。
さぁ、たっぷりとUNIXコマンドを駆使した妙義を堪能するがいい。
ワッハッハッハッハー!!!


シェルショッカーの掟
----------------------------------------------------------------------

1. 命令通りに動かぬコードは、rm -rf *。
2. 他言語に負けたコードは、rm -rf *。
3. 任務に失敗したコードは、rm -rf *。
4. 平和な環境でしか使えぬコードは、rm -rf *。
5. 性善説で書かれたコードは、rm -rf *。
6. 建設的に怠けぬコードは、rm -rf *。
7. 遅いコードは、rm -rf *。
8. バグ・破損コードは、rm -rf *。
9. 親子・兄弟プロセスも正常動作のためには、killall -9 <process>。

仮面○イダーとかいう架空のヒーローが出てくる物語のゲ○ショッカーの掟ではない！断じて違う。

.. rubric:: 脚注

.. [#coterie] この節の最後に掲載しておいたので見たまえ。
.. [#ad_batsu_game] 消耗品ならいざしらず、一度買った同じものを買うかっつーの! 観賞用、保存用、交換用で3つ買えとでも?
