**********************************************************************
コマンド活かせば言語は要らぬ！「シェルスクリプト Webアプリ『即席』作成術」
**********************************************************************

全世界60億人の人間どもよ、ごきげんよう。
私は秘密結社シェルショッカー [#about_shellshoccar]_ 日本支部のリッチー大佐である。

これまでアノ、シェルスクリプト総合誌を支持し、
そして *エクストリームシェルスクリプト* に洗脳されてくれてありがとう。
とても感謝している。

今日は、お前たちをより深いエクストリームシェルスクリプトの世界に引きずり込むべく、
我シェルショッカー日本支部が密かに開発した *とあるWebアプリ* を披露してやる。

UNIXコマンドを使い倒せば、PerlだのPHPだのRubyだのPythonだのJavaだの……、それにSQLだの、
そんなもの一切使わずに、サクッとWebアプリが作れてしまうことに、
「一生懸命言語の文法覚えて、書いてきたあの苦労は一体何だったんだ……」
と途方に暮れることだろう。

さぁこれを読んで、エクストリームシェルスクリプトに、
より深く洗脳され、そして我々の世界征服を手伝うがいい。わっはっは!

.. rubric:: 脚注

.. [#about_shellshoccar] 仮面○イダーとかいう架空のヒーローが出てくる物語のゲ○ショッカーではない！断じて違う。我々は壊滅などしない。


シェルスクリプト製ショッピングカートを作るのだ!
======================================================================

さて今回、我々が何を開発したかといえば、それはショッピングカートである。
我々が多数書き溜めた、シェルショッカーの掟 [#coterie]_ をはじめとした同人誌、
同人グッスをネット販売し、世界征服を図るというわけだ。

実物が見たいか? いいだろう、先に次節
「`見よ! このショッピングカートを`_」
を読んでも構わんぞ。

.. rubric:: 脚注

.. [#coterie]             この節の最後に掲載しておいたので見たまえ。


なぜ今さら自作? しかもシェルスクリプトで……
----------------------------------------------------------------------

「それにしても今さらなんでわざわざ自分で作る?」と思うことだろう。しかもシェルスクリプトで。
それは既存のショッピングカートでは、我らの壮大なる世界征服の野望を実現するには機能が足りないからなのだよ。
「無ければ自分で作る」しかない。そうするときっと、「わざわざ一から作るなんて大変だし……」と及び腰になるだろう。

しかし、それは高級言語への依存した考えがあるからこそ生まれるのだよ。
シェルスクリプトを使えば、いつも使っている *書き捨てワンライナー* と同様に書ける。
つまり、さっさと作れるということだ。

ウソだと思うならこの後紹介するソースコードを一度サーっと眺めてみるがいい。
ほとんどが、UNIXコマンドをパイプで繋いだ普通のワンライナーを、
つらつらと貼っただけの姿をしていることがわかるはずだ。
if文やfor、while文、ましてや関数(シェル関数)は唯一の例外 [#shellfunc_exception]_ を除いて一切使っておらん。
そうすることで **「ソースコードを上から下へ素直に読める」** ようになっているのが特徴だ。

.. rubric:: 脚注

.. [#shellfunc_exception] 唯一の例外とは、エラー判定時に処理を中断するためのシェル関数だ。メインの処理を「抜け出して終わり」という処理だけは、メイン処理の話の腰を折らぬよう、関数化して一言で済ませる方が読みやすい。


上から下へ素直に読める
``````````````````````````````````````````````````````````````````````

「goto文は使うな」と言っている奴らはたくさんいるが、
if, for, while, 関数といった分岐・ループ構文は、当たり前のように使っておる。
そもそもgoto文を使わないのは、プログラムを読む者があっちの行、そっちのファイル、と
いろいろなところを読み回さなければならぬスパゲティー化を防ぎたいからではなかったのか！
gotoを使わなくたって、こういう記述を使ったら同じことだ。

上から下に素直に読めればとても都合がいい。理解も早いし、確認も楽だ。
プログラムに限らず、例えば「イー!イー!」言ってる我組織の下っ端工作員どもを教育するための手順書も当然そうなっている。
工作員達に侵略工作の手順を教える時、もしその指示書に「if」とか「for」とか「別紙参照」といったことが頻繁に書いてあったら
工作は失敗するだろう。我々幹部と違って、あいつらはそんなに賢くないからな。

ゲル○ョッカーとやらが壊滅したのは、
工作指示書にifとかforみたいな複雑な指示があったからに違いない。ククッ、愚かな奴らだ。

コマンドを駆使すれば分岐・ループ構文は消せる
``````````````````````````````````````````````````````````````````````

では、どうやって分岐・ループ構文を無くすか。それはいかにコマンドを駆使するかにかかっている。

例えば、お前たちはこういう作業をどうやってこなす?

	01から99までのディレクトリーを作れ。

恐らくこんな感じではあるまいか?

.. code-block:: bash
	:linenos:

	i=1
	while [ $i -le 100 ]; do
	  filename=$(printf '%03d' $i)
	  mkdir $filename
	  i=$((i+1))
	done


これでは、シェルスクリプトを使ってもあまり意味はないのだよ。
コマンドを活用するのだ。

.. code-block:: bash
	:linenos:

	seq 0 99               |
	awk '{printf("%02d")}' |
	xargs mkdir


どうだ、ループが消えて単純化できただろう。コードが減って、書くのも早い。
コツは、始めから完成データを作ることをイメージするのではなく、
素朴な元データを用意して、それを徐々に徐々に完成品に変化させていくようにイメージすることだ。パイプとコマンドを駆使してな。
ちなみに、この例でseqコマンドとAWKコマンドまとめて、1つのAWKコマンドにしてはダメだ。
それではAWKの中にfor文が復活してしまう。
なるべくコマンドの中に、条件分岐やループ文的な処理を閉じ込めてしまうのだ。

もしxargsコマンドを知らなかったとしても、まだこっちの方がマシだ。

.. code-block:: bash
	:linenos:

	mkdir 00 01 02 03 04 05 06 07 08 09
	mkdir 10 11 12 13 14 15 16 17 18 19
	mkdir 20 21 22 23 24 25 26 27 28 29
	mkdir 30 31 32 33 34 35 36 37 38 39
	mkdir 40 41 42 43 44 45 46 47 48 49
	mkdir 50 51 52 53 54 55 56 57 58 59
	mkdir 60 61 62 63 64 65 66 67 68 69
	mkdir 70 71 72 73 74 75 76 77 78 79
	mkdir 80 81 82 83 84 85 86 87 88 89
	mkdir 90 91 92 93 94 95 96 97 98 99


文字の量は増えたが、大半がコピペで済むので実質的な打ち込み量は少ないし、
単純作業の繰り返しなので理解も早い。

コマンドを駆使していかに単純に書くか。知らないなら知ってる範囲でいかに単純に書くか。
そっちの方がよっぽど重要だ。下っ端工作品を引き連れて、敵が息つく間もなく侵略をするにはな。

自作アプリならやりたい放題、世界征服も思いのまま
----------------------------------------------------------------------

これは余談だが、既存のショッピングカートを使わないのは、我々の世界征服を実現するのに必要な機能が無いからだと先程言った。
その必要な機能とは何か。それは、世界中のWebページを我々のショッピングサイトに改造してしまうという機能だ!!!

世界に支部を持つ我々と言えど、ショッピングサイトを我々のサイトだけでやっていてはちっとも効率が上がらん。
そこでだ。世界中のWebページを改造し、それらを皆我々のショッピングサイトにできるとしたら……、
フッフッフ、背筋が凍るだろう。そんな機能を仕込むことだって自作ならどうということはない。

秘密はサードパーティーCookie
``````````````````````````````````````````````````````````````````````

お前たちは *サードパーティーCookie* を知っているか? 例えこの言葉を聞いてことが無くても、この技術がもたらす恐るべき洗脳工作は体験しているはずだ。

例えば、あるショッピングサイトで人には知られたくない萌え萌えフィギュアを買った、あるいは買おうとしたけど思いとどまってやめたとしよう。
この時すでに恐るべき洗脳工作は始まっているのだ。
その後お前たちが全く関係無いサイトを訪れても、訪れたサイトに広告スペースがあると
その全く同じ萌え萌えフィギュアの広告が、まるで罰ゲームのように表示されるだろう。
買ってないならまだしも、例え買っても全く同じもの広告されるのだから、罰ゲームとしか言いようがない [#ad_batsu_game]_ 。
あの工作で用いられているのが、サードパーティーCookieという機能だ。

仕組みはこうだ。
まず、ターゲットの少年AがショッピングサイトBで買い物なり物色をする。
すると大抵お前たちのWebブラウザーは、お前たちを特定するためのCookieを、サイトBから喰わされることになる。
そこまではまぁいいのだが、

その後、何も関係無いサイトCを訪れた時、サイトCを見ている裏で、
少年AのWebブラウザーはサイトBにCookieを送らされるのだ。
すると、少年Aの購入履歴や物色履歴を知っているサイトBは、
購入あるいは物色した商品をサイトCの広告欄に表示するというわけだ。

このように、今訪れているサイトとは別のサイトとやりとりするCookieのことを
サードパーティーCookieという。

.. rubric:: 脚注

.. [#ad_batsu_game]       消耗品ならいざしらず、一度買った同じものを買うかっつーの! 観賞用、保存用、交換用で3つ買えとでも?

世界中のサイトにカゴ入れボタンを仕込む
``````````````````````````````````````````````````````````````````````

さて、ここまでの話を聞いて我々の意図が汲み取れたかな?
そうだ! 我々のショッピングカートの買い物カゴCookieを、世界中のサイトで共有させてしてしまうのだ。
我々の組織とは全く関係無いブログページに置かれたナゾの買い物ボタン……。
そのブログサイトの常連の少年A。「あれ、この人商売始めたのかな?」と思いつつも、
ブログ記事に感銘を受けてついつい「買い物かごに入れる」ボタンをポチリ。
その瞬間、我々が用意した真のショピングサイトと裏でAjax通信を始め、
我々の買い物カゴに紐付けられたCookieを喰わされる。

あとはその少年Aが、そのことに気付かずままレジへ移動し、ポチる(購入する)のを待つばかり。
このようにして我々は、世のWebページを侵略しながらじわりじわりと世界を征服していくのだ。

何、「どうやってブログ開設者にボタンを設置させるか」だって?
そのためにエクストリームシェルスクリプトの世界を築き上げてきたのではないか。
今回、ショッピングカートをシェルスクリプトで組むという
誰もがあっけにとられる活動を見せつけることで、まずはお前たちが洗脳されるというわけだ。
この本を手にした以上、もう後戻りはできん。
さぁ、たっぷりとUNIXコマンドを駆使した妙義を堪能するがいい。
ワーッハッハッハッハー!!!


シェルショッカーの掟
----------------------------------------------------------------------

1. 命令通りに動かぬコードは、rm -rf *。
2. 他言語に負けたコードは、rm -rf *。
3. 任務に失敗したコードは、rm -rf *。
4. 平和な環境でしか使えぬコードは、rm -rf *。
5. 性善説で書かれたコードは、rm -rf *。
6. 建設的に怠けぬコードは、rm -rf *。
7. 遅いコードは、rm -rf *。
8. バグ・破損コードは、rm -rf *。
9. 親子・兄弟プロセスも正常動作のためには、kill -9。

仮面○イダーとかいう架空のヒーローが倒す組織ゲ○ショッカーの掟ではない！断じて違う。



見よ! このショッピングカートを
======================================================================

ではそろそろ、ショッピングカートの実物を披露しよう。
名前は、崇高なる我々の組織の名称からとって **「シェルショッカー1号」** である [#name_of_ShellSoccar]_ 。

.. rubric:: 脚注

.. [#name_of_ShellSoccar] ホントは、 **シェル** スクリプト製 **ショッ** ピング **カー** トから来ているというのはヒミツだ!


実物はこれだ
----------------------------------------------------------------------

見よ、これが我々が独自に開発したシェルスクリプト製ショッピングカートだ!
動くものが見たければ http://richlab.org/coterie/ にアクセスするがよい。

.. .. figure:: スクリーンショット
..
..    ショッピングカートに改造されたページ

我々が世を忍ぶ仮の同人サークルとして管理してきた「まつらリッチ研究所」の
同人誌紹介ページを、ショッピングカートに改造したのだ。
商品画像の横に「カゴに1つ追加」というボタンがあり、
画面左下には「レジへ進む」ボタンがあるのがわかるな。

このサイトでは、レジへ進むボタンをWebブラウザー画面の左下に
しつこく陣取るようにしてあって、画面を上下スクロールさせても追尾していく。
このページを見たら最後、ページ訪問者の目の前に「レジへ進む」という
暗黒世界への扉が常に口を開けて待ち構えているというわけだ。
わっはっは!

.. .. figure:: スクリーンショット
..
..    「お客様情報入力画面」暗黒世界への入り口

レジへ進めば、よくあるショッピングカートアプリと同様、
カゴに入っている商品の確認(数量変更も可能)と、お客様情報入力欄が現れる。
今どき当たり前の郵便番号による住所自動入力機能(Ajax)も装備しており、
訪問者に気持ちよく入力してもらいながら最後に「注文」ボタン押下までいけば
個人情報を集めるのだ、わっはっは!

念を押しておくが、Webブラウザー上のJavaScriptは置いといて、
サーバー上のプログラムは全てシェルスクリプトだからな。

.. .. figure:: スクリーンショット
..
..    PayPal誘導機能も実装し、組織運営の資金源に

購入者の個人情報を取得したら、最後に必要なのは代金支払い手続きだ。
クレジットカードによる購入を選択した顧客にメールを送りつけ、
そこに書き込まれているURLを踏ませればPayPalへ誘導されるようになっている。

というわけでクレジットカード決済には PayPal を使うようにした [#PayPal]_ 。
PayPalのAPIを独自解析 [#PayPalAPI]_ し、ようやく繋ぎ込みに成功した。
表世界のクレジットカードから代金が引き落とされることもちゃんと確認済だ。
これで、組織の資金源もきちんと確保できる。
洗脳アイテムを売り、資金も集める。なんとすばらしいブラックエコシステムではないか。

シェルスクリプト向けのPayPal APIライブラリーなどというものは存在せんので、
もちろんここもシェルスクリプトで自作したのだ。仕組みは後で語ることにしよう。

.. コメント: ToDo 「後で語る」の部分にリンクをつける

.. rubric:: 脚注

.. [#PayPal]              技術的にはPayPal以外だってもちろんできる。が、PayPalだと個人や同人サークルという表の顔でも審査に通れるし、最も都合がいいのだよ。初期費用も不要だしな。
.. [#PayPalAPI]           一応APIの公開資料はあるが、不明な点も多く、サポートに問い合わせたらたらい回しされた挙句、求める回答は一度も得られなかった。「オープンな仕様」ってレベルじゃねーぞ!

商品説明ページは、他人の作ったものを「改造」して作る
----------------------------------------------------------------------

「シェルショッカー1号」の最大の特徴にして特長は、 **このプログラムは自ら商品ページを作らない** ということだ。
開発期間が短い理由の一つもそのせいだ。

一般的なショッピングカートプログラムだと、商品説明ページの生成まで管理を見てくれる。
専用のデザインテンプレートを用意して、それを使うように設定すると全ての商品が全てそのテンプレにはめ込まれるわけだ。
しかしテンプレで管理されているがゆえに、そのテンプレに無いページというものが作れん。
例えばキャンペーンとか、型(=テンプレ)に囚われないページを作りたいと思った時がとても面倒ではないか。
もしいちいち対応しようとしたら、テンプレやプログラムが肥大化していく。

*本業が世界征服である我々* にとってはなおのこと、そんなところに労力を割くのは馬鹿馬鹿しい!
だから、「かごに入れる」とか「レジへ進む」といったボタン類だけを提供し、
それらを好きなページに張り付けるだけで済むようにした。
ボタンの他は、独自の JavaScript ファイルを1つ、<script>タグで読み込むだけでいい [#original_JS]_ 。
手打ちHTMLでも、MovableTypeやWordPressなどのブログCMSが吐くページでも、あるいははてなブログなどのブログサービスサイトが吐くページでも、
いとも簡単にショッピングカートに改造できるのだ。世界征服も捗るというものだ。
どぅぉーだ、スゴいだろう。

ウソではない。ためしに、はてなブログにアカウントを作って、改造してみたぞ。

.. .. figure:: スクリーンショット
..
..    はてなブログも「シェルショッカー1号」で侵略

	http://richlab.hatenablog.com/

商品説明ページにはもれなく「通販」などといったタグを付けておけば、
もう商品一覧もすぐに出せるし、これで十分でないか。
そして、商品をカゴに入れたら「レジへ進む」を押してみよ。
ドメインが替わってもキチンとカゴの中身が引き継がれているのがわかるな。
これというのもサードパーティーCookieのおかげだ。わっはっは。

.. rubric:: 脚注

.. [#original_JS]         jQuery等の汎用ライブラリーなど一切使っておらんので、既にあるライブラリーや、バージョン衝突で悩まされることもないのだ。


商品登録も自分でやれぃ
----------------------------------------------------------------------

もう一つの特徴は、商品登録ページというのも存在しない点だ。
そもそも、商品紹介ページを他のブログ等で勝手に作れと言っているのだから、
商品画像や説明文を登録する欄を用意してもまったく意味がないからな。

とは言え、カゴに入れた後に必要になる最低限の情報(下記)は持っていなければならない。

- 商品名
- 価格
- 最初の在庫数
- 重さや厚さ(送料計算時に必要)

しかし、そんなものはテキストファイルに書けば済む話だ。

	いちいち設定画面など作るの面倒だ! そんなもんテキストエディターで直接書けぃ!

と言いたい。そんなものいちいち作るからプログラムが肥大化していくのではないか。
**シェルスクリプトは、コマンド呼んで他人任せにするのが真髄。**
設定ファイルの書き換えだって、テキストエディターで書き換えて、
ファイルアップローダーでアップして済ませれば、何も開発せずに事足りるのだよ。

というわけで、「シェルショッカー1号」の商品設定ファイル(商品マスター)はこうなっている。

.. code-block::

	#商品ID   品名(mojihame escape)       単価 発売日    大きさ    在庫情報体 URL            …
	RPC       リッチなコンピューター入門   500 20020901  5mm,182g  @          http://richlab …
	7sec_ip05 ななか_Inside_Press_vol.05  1000 20140817  10mm,300g @          http://richlab …
	  :
	  :

テキストエディターは、viでもemacsでも、あるいはリモートからNotepadでもmiでも……、好きなのを使えばよい。

コピーすりゃ、どこでも使える
----------------------------------------------------------------------

他にもいろいろと特徴があるが、あと1つだけ言わねばならぬこと。
それは **コピーすりゃ、どこでも使える** ということだ。

なぜなら「シェルショッカー1号」が必要とするソフトは表に記したものだけだからだ。

.. table:: 「シェルショッカー1号」が求めるもの

   +---------------------+-----------------------------------+ 
   | 必要なもの          | 備考                              |
   +=====================+===================================+
   | POSIX準拠シェルと   | FreeBSDやLinuxも勿論OK            |
   | コマンド群          | (BashやGNU拡張機能等は一切不要)   |
   +---------------------+-----------------------------------+
   | mktempコマンド      | (AIXには無かったが)大抵のOSにある |
   |                     | (一応、ソースコードも付けた)      |
   +---------------------+-----------------------------------+
   | truncateコマンド    | (CentOS5には無いが)大抵のOSにある |
   |                     | (一応、ソースコードも付けた)      |
   +---------------------+-----------------------------------+
   | flockまたは         | MacOS Xには無いが大抵のOSにある   |
   | lockfコマンド       | (一応、ソースコードも付けた)      |
   +---------------------+-----------------------------------+
   | sendmailコマンド    | 主要なUNIX系OSには大抵入ってるが  |
   |                     | 無ければインストールしておく      |
   +---------------------+-----------------------------------+
   | curlコマンド        | インストールしておく              |
   |                     | (主要Linuxディストリには大抵ある) |
   +---------------------+-----------------------------------+
   | nkfコマンド         | インストールしておく              |
   |                     | (主要Linuxディストリには大抵ある) |
   +---------------------+-----------------------------------+
   | Apache              | あらかじめインストールしておく    |
   +---------------------+-----------------------------------+

どれも主要なOSには初めから入っているものが多いし、
入っていなくても簡単にインストールできるものばかり [#if_unavailabled]_ 。
気軽にインストール作業のできないレンタルサーバーでも、大抵これらは入っている。

ちなみに表にも書いたが、シェルとコマンドは断りのない限りPOSIXの範囲で動く。
BashやGNU拡張やLinux環境という機種依存な環境を、それがUNIX一般の話であるかのごとく語ったりするフトドキ者が一部におって、忌々しい!
そんな愚か者どもが作るドキュメントなど`rm -rf *`だ!!

.. rubric:: 脚注

.. [#if_unavailabled]     最悪、無くても「シェルショッカー1号」のリポジトリーに、それらのソースコードを付けておいので、コンパイルして用意することはできる。


コンパイル、他言語、DB……、どれも不要でラクラク世界征服!
``````````````````````````````````````````````````````````````````````

ということは、例えプログラムの別サーバー移転を迫られてもコピーすればそれでおしまい。
せいぜい設定ファイルをちょこっと書き換えるだけでよい。
少なくともコンパイルやデータベースのインポート・エクスポートなどといった作業とは無縁だ。
また、バージョン問題に苛まれる可能性も低い。この中で言えばせいぜいApacheくらいなものだ。

おかげで **第一特集のImmutable Infrastructureにもとーってもやさしい** はず!

そして、よそのWebページのみならず、「シェルショッカー1号」のプログラムも
あちこちに持っていきやすいから、世界征服もやりやすいというものだ。

さあお前たちも、「シェルショッカー1号」でネットショップを開いてしまえー!
はっはっは!

.. .. include:: Sec1.rst

.. .. include:: Sec1.rst






どうやってできてる？ショッピングカート
======================================

買い物カゴを作る     - ddコマンドでCGI変数取得
--------------------------

* CGI変数はどうやって渡ってくるのか？
* ブラウザへの応答はどう返せばいいのか？
* Ajaxによる買い物カゴの実際

在庫管理をする       - truncateで在庫持出、echoで補充
--------------------------
* カーネル活かせばロックは要らぬ！

カゴの中身を見せる   - joinコマンドで表計算
--------------------------
* INNER JOINにjoinコマンド
* OUTER JOINにjoinとsedコマンド
* パイプ活かせばSQLは要らぬ!

顧客情報記入欄を作る - sed&AWKでHTMLテンプレに文字ハメ
--------------------------
* 基本的にはsedでハメ
* 繰り返す各行には特製mojihameコマンド
* JSONもXMLもCSVも、sedやAWKでパース可能。

注文明細メールを送る - sendmailコマンドで一発送信
--------------------------
* メールファイルはどういう構造か
* 日本語メールはnkfコマンドで変換
* 明細表もmojihameコマンドで

決済をする           - curlコマンドでPayPal APIを叩け
--------------------------
* PayPal APIの概要
* CGI変数はsedやAWKで作成する
* curlでAPI叩き
* ヒアドキュメントで303リダイレクション






:: 
