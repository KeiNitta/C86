
*****
chap1
*****

Immutable Infrastructureの最適解を探る
==========================================

2014年のインフラ界隈についてまとめます。


出発点とオチ（あとで消す
-------------------------

* この章はいわゆる格子です
* Immutable Infrastructure って言うけど、どうなの最近

  * Immutable Infrastructureとは？

* chefつらぽよなエンジニアが増えている話をきいたりしてつらぽよ

  * どのへんつらぽよ？

* 業務で本当に使えてる？

  * 結局どうなるのよ、自動化して。恩恵はあるの？

* serfとかdokkerとかansibleとかいうけど実際使えてる？
* それじゃあそれぞれ解説しましょうか

  * と思ったけどテスト大事だよね！serverspecのお話からやっていく

    * それから、chefやansibleをプラがブルに使っていく話

  * chefつらぽよ。chefについてはvol.4でやったのでそっちを参照
  * ansibleどう？

    * 使い方を解説

  * Vagrantとか使ったことないけど実際どうなの？どういう環境で動作するの？どの辺がうれしい？
  * hostsの書き換えどうしてる？
  * 監視ツールに自動で突っ込んでほしいよねー
  * CI as a Serviceが現段階でのゴールのような気がする

    * 自動化最高！ヒャッハー!!
    * IT全般籐製（ウッ頭が

* 業務に応じた感じでもろもろの技術をチョイスして組み合わせて使えるといいよね！（（結論

  * 多分このへんが無難な結論だと思う

* 読者層

  * インフラ屋
  * 
  * コーダー(プログラマー
  * あらゆるものを自動化したい人


この記事について
---------------

Immutable Infrastrucure(以下、IIと略します)の思想と、それを取り巻く技術を解説します。


Immutable Infrastructure とは
-----------------------------

いままでの環境をぶっ壊して、新しく作りなおすことです。目的は、webアプリケーションのデプロイを失敗なく行うことにあります。

.. 若干乱暴な言い方だけど概ね間違ってない認識

IIは、今年のインフラ業界のバズワードと言っても過言ではないでしょう。IIを直訳すれば、「不変なインフラ」となります。
つまり、一度デプロイしたサーバには変更を加えないということを意味しています。
もし、アプリケーションに変更を加えたい場合は、再度サーバを構築すればいいのです。そして以前デプロイしたサーバは、綺麗さっぱり捨てます [#iidi]_。

.. [#iidi] 綺麗さっぱり捨てることからDisposal Componentという名前が適切という話もあります

IIの登場以前は、開発環境で動作確認したあと、手動で本番環境へのデプロイを行っていました [#iidep]_ 。
そのため、本番のプログラムを上書きしたその瞬間、「503 Service Temporarily Unavailable」の文字が目の前に現れ、
目の前がまっしろわーるど [#iimashiro]_ に遭遇した人は私だけではないでしょう [#iitaisho]_ 。
原因は、開発環境と本番環境の違いや、デプロイ職人の人為的ミス、複雑なデプロイの伝達ミスなど多岐にわたります。

.. [#iidep] 現在進行形でそういう運用を行っているところがあると思いますが...
.. [#iimashiro] アーティスト：みかくにんぐっ / iTunesでも配信しています
.. [#iitaisho] そう、この記事の読者対象はそういう経験をしたことがあるあなたです


背景
^^^^^

「ぶっ壊して、新しく作りなおす」ことが簡単にできる技術が現れたのが、このIIが生まれた背景にあります。

* コードの管理はGit。そしてpull requestという機能
* コードのテストにvagrantやdokker、jenkins
* サーバの構築手順はpuppetやchef、ansible
* サーバはAWSといった仮想環境

こういった技術が2014年になってひと通り揃ってきました。


DevOps
^^^^^^^

ここからIIが生まれた理由について、寄り道をします。知ってるよ！ということであれば次の章へ飛んでください。

さて、DevOpsとは、開発（Development）と運用（Operations）のそれぞれの頭文字を取ったものです。悲しいかな、開発と運用は、しばしば対立します。
往々にして、運用は複数のシステムのサーバの面倒をみています。開発者は、問題が見つかったら本番環境でのログが見たいと思います [#iidevlog]_ 。
そのとき運用は、ほかの開発チームからの対応をしており、すぐには対応できないことが多々あります [#iidevops]_ 。
こういったことが積み重なり、開発者はすぐに見たいログが見えない、運用者は複数の開発者からのログ欲しい依頼キューが溜まっていきます [#iidevopsref]_ 。

.. [#iidevlog] 本番のログは秘密がいっぱいで直接見ることができない場合があります
.. [#iidevops] いやーあるんですよねこういう状況。最盛期だと本番へのデプロイを3つ並行しつつ、ログ欲しいよ依頼に対応してたり。え？もちろん聞いた話ですよ？？
.. [#iidevopsref] さらなるDevOpsについては http://www.atmarkit.co.jp/ait/articles/1307/02/news002.html

この状況を打破するために、自動化を図ります。


継続的デリバリー
^^^^^^^^^^^^^^^

継続的デリバリーを調べると、「継続的デリバリー 信頼できるソフトウェアリリースのためのビルド・テスト・デプロイメントの自動化」 [#iikz]_ という本がすぐに見つかります。
2012年に行われたカンファレンス、AWS re:Inventにて「Amazonは1時間に最大1000回もデプロイする」 [#iideploy]_ という公演がありました。
そのなかで、「Amazon.comでは11秒ごとに新しいコードがデプロイされている。そして最も多いときで1時間に1079回デプロイが行われた。
これには機能追加だけでなくバグフィクスなども含まれるが。平均で1万、最大で3万ものホストがデプロイを受け取る。」とあります。
この利点は、バグはすぐに潰され、機能の拡張の恩恵も受けられることを示します。このサイクルを行うために、自動化が必須です。

どのように自動化するのかについては、web上に事例があるのであるのでご覧になった方もいるかもしれません。
例えば、この本の原稿の生成も自動化されています。
githubにReST形式の原稿をpushすると、VPS [#iivps]_ でjenkinsが動いており、pushを検知するとドキュメントビルダーのsphinx [#iisphinx]_ のコマンドが実行され、入稿用のPDFが生成されます。

自動化の最先端として、githubにpull requestを行うとテストが実行され、そのあと本番環境へデプロイされる仕組みが紹介されています [#iighedep]_ 。
pull requiestをIRCなどのツールで自動化して作成し、Pull Request内容を確認、mergeするとそのままテストさて、そして本番環境へコードが入ります。
自動化できるところは自動化し、人の手が入らないようにすると、人的ミスがなくなります。 

.. [#iikz] http://www.amazon.co.jp/dp/4048707876
.. [#iideploy] http://www.publickey1.jp/blog/12/amazon11000_aws_reinventday2_am.html
.. [#iishinx] http://sphinx-users.jp/
.. [#iighedep] GitHub 時代のデプロイ戦略 http://d.hatena.ne.jp/naoya/20140502/1399027655
.. [#iivps] Virtual Private Server。仮想専用サーバのことです。この原稿PDFはさくらのVPSでビルドされています

テスト駆動インフラ
^^^^^^^^^^^^^^^^^

アプリケーション

.. ソフトウエアテストとインフラ側に別れる必要があるよなぁ


Blue-Green Deployment
^^^^^^^^^^^^^^^^^^^^^^




hoge
^^^^^^^^^^^^^^

なぜ、こういった概念が出てきたのでしょうか。
例えば、開発環境のサーバを前任者から引き継ぎました。当然ドキュメントはありません[ドキュメントつくっとけよ感ありますけど、本当の話だから仕方ない]。
apacheのバージョンを上げたり、プラグインをインストールしたり、Virtual hostsを追加したり、ユーザを追加したり、
OSの設定を変更したりと、今日まで連綿と繰り返されていた秘伝のタレと化していることがよくあります。

* ある日、意識の高い[笑]社員がやってきて、あのユーザはいても仕方ないし削除しますね、と言って実施したところ、どういうわけか環境が壊れてしまいました
* また別の日、メンテナンスのためサーバを再起動したらアプリケーションが動かなくなりました
* 更に別の日、サーバ古くなったので新規に構築しようとしたらどこにもドキュメントがなくて、そもそも何がインストールされているのか調べる羽目になりました

といったような小さいことがよくありますよね！[え？遭遇したことない？よく管理されたシステムで羨ましいです。いやはや]。
そこで、いつどういう変更を行ったかテキストに書き留める、あるいは、シェルスクリプト化しておくといった対策がとられることがあります。

.. このへんで上書きデプロイメントの話入れたい
   コストの兼ね合いになるので辛みある

それらを一歩進めて、puppetやchefといった構成管理ソフトがでてきました。こうして、心のこもった仕事で定評のあるデプロイ職人の仕事が自動化されつつあります。

これらの自動化を後押ししたのは、AWSを代表とするサーバの仮想化技術[いわゆるクラウド]が普及してきたことも要因です。

.. 若干インフラよりな内容になってしまった

.. orchestrationをどの辺に書くか。あの三層の図をどこに入れるか？

Immutable Infrastructure の利点
-------------------------------

自動化されるとどういうことが起きるかというと、仮想化技術を使って、壊して作りなおすことが簡単になります。自動化により、人の手による設定ミスや漏れがなくなります[特に本番環境に対して有効]。
これは、簡単にサーバを構築できるというインフラの側面だけでなく、ソフトウエアに対しても恩恵があります。
ソフトウエアのテストを行う場合を考えてみます。ひとつのサーバに開発環境が乗っかっている場合、ミドルウエアのバージョンは環境に固定されてしまいます。
このとき、新規にサーバを自動で構築してテストを行うことができるため、ミドルウエアのバージョンは自分で指定することが可能となります。

.. これやるとき、テスト書いてることが前提となっているの

.. herokuの具体例出したほうが早い？かなぁ

IIの三層
--------

おーけすとれーしょん、こんふぃぐれーしょん、ぶーとすとらっぴんぐという三層の考え方があります。
どういう設定をどこで行うか、というのは議論の余地がまだあって、正確な定義はゆらいでいる状態です。

* Orchestration
  
  * Fabric, Capistrano, MCollective

* Configuration

  * Puppet, Chef, AWS OpsWorks

* Bootstrapping

  * Kickstart, Cobbler, OpenStack, AWS



早速実践しよう
-------------

.. 何を目的としている？

テストを書けよ！
chef辛いという話を聞く。ansibleに鞍替えしてみたい誘惑に駆られる。
が、結局、構築したものがきちんと動いているかどうか確かめる必要がある。だから構築されているサーバに対してserverspecでテストを書くところから始めた。

ここからserverspecの実践を始める。

serverspec
-----------

serverspecとは
^^^^^^^^^^^^^^^

使ってみる
^^^^^^^^^^



docker
--------

dockerとは
^^^^^^^^^^^

使ってみる
^^^^^^^^^

vagrant
--------

vagrantとは
^^^^^^^^^^^

使ってみる
^^^^^^^^^^

ログの管理どうする？
------------------

fluentdを使って収集しましょう。いつでもサーバを壊せる状態にしておきましょう。
Elasticsearch + kibanaでログを可視化できてはっぴー☆

.. fluentdを使う利点とか書く。


DBどうするよ？
-------------

気軽に壊せないので、こわさない。以上！！

サーバの監視どうしよう
--------------------

気軽にこわせて気軽に立ち上がるサーバに名前をつけると大変なことに！！！
サーバに名前を付けることは悪であるという議論。hobbitとかzabbixとかそういうツールだと登録してるホストがなくなるとデータがなくなっちゃうんだよねー過去のトレンドが消えてしまうことが問題
鯖を取り上げる。



とりまく技術
--------------------

* 概念

 * DevOps
 * 継続的デリバリー

   * 一日に何回デプロイしてますか？
 
 * II
 * blue-green
 * disposable
 * orchestration
 * test
 * 構成管理をcode化するということ

* 技術

 * chef
 * ansible
 * AWS
 * docker
 * vagrant
 * fluentd

   * ログをどうするかの話
   * じゃあDBどうすんのよ。頑張れ！！！
 
 * Serf
 
   * hostsを書き換える例
 
 * serverspec
 * mackerel.io


結論
-----

最適な技術をうまく組み合わせて事故のないデプロイをしていこう。
