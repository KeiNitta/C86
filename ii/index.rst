
*****
chap1
*****

Immutable Infrastructureの最適解を探る
==========================================

出発点とオチ（あとで消す
-------------------------
* この章はいわゆる格子です
* Immutable Infrastructure って言うけど、どうなの最近
  * Immutable Infrastructureとは？
* chefつらぽよなエンジニアが増えている話をきいたりしてつらぽよ
  * どのへんつらぽよ？
* 業務で本当に使えてる？
  * 結局どうなるのよ、自動化して。恩恵はあるの？
* serfとかdokkerとかansibleとかいうけど実際使えてる？
* それじゃあそれぞれ解説しましょうか
  * と思ったけどテスト大事だよね！serverspecのお話からやっていく
    * それから、chefやansibleをプラがブルに使っていく話
  * chefつらぽよ。chefについてはvol.4でやったのでそっちを参照
  * ansibleどう？
    * 使い方を解説
  * Vagrantとか使ったことないけど実際どうなの？どういう環境で動作するの？どの辺がうれしい？
  * hostsの書き換えどうしてる？
  * 監視ツールに自動で突っ込んでほしいよねー
  * CI as a Serviceが現段階でのゴールのような気がする
    * 自動化最高！ヒャッハー!!
    * IT全般籐製（ウッ頭が
* 業務に応じた感じでもろもろの技術をチョイスして組み合わせて使えるといいよね！（（結論
  * 多分このへんが無難な結論だと思う

* 読者層
  * インフラ屋
  * コーダー
  * あらゆるものを自動化したい

Immutable Infrastructure とは
-----------------------------

.. とっかかりどっからやればいいかなぁ


最近[いつ]、Immutable Infrastructure(以下、II)という概念が注目されおり、バズワードとしてひとり歩きしています[要出典]。
IIを直訳すると、「不変なインフラ」となります。「不変」というのは、アプリケーションをリリースして、本番環境に組み入れたサーバ(またはインスタンス)には手を触れないという考え方から来ています。
もし、変更を加える場合は、新しいインスタンスを立てるなどしてサーバを構築し、古いサーバを破棄して切り替えます[blue-green deployment]。
サーバやインスタンスをさっさと破棄できるところからDisposable Componentsとも呼ばれます。

なぜ、こういった概念が出てきたのでしょうか。
例えば、開発環境のサーバを前任者から引き継ぎました。当然ドキュメントはありません[ドキュメントつくっとけよ感ありますけど、本当の話だから仕方ない]。
apacheのバージョンを上げたり、プラグインをインストールしたり、Virtual hostsを追加したり、ユーザを追加したり、
OSの設定を変更したりと、今日まで連綿と繰り返されていた秘伝のタレと化していることがよくあります。

* ある日、意識の高い[笑]社員がやってきて、あのユーザはいても仕方ないし削除しますね、と言って実施したところ、どういうわけか環境が壊れてしまいました
* また別の日、メンテナンスのためサーバを再起動したらアプリケーションが動かなくなりました
* 更に別の日、サーバ古くなったので新規に構築しようとしたらどこにもドキュメントがなくて、そもそも何がインストールされているのか調べる羽目になりました

といったような小さいことがよくありますよね！[え？遭遇したことない？よく管理されたシステムで羨ましいです。いやはや]。
そこで、いつどういう変更を行ったかテキストに書き留める、あるいは、シェルスクリプト化しておくといった対策がとられることがあります。

.. このへんで上書きデプロイメントの話入れたい
   コストの兼ね合いになるので辛みある

それらを一歩進めて、puppetやchefといった構成管理ソフトがでてきました。こうして、心のこもった仕事で定評のあるデプロイ職人の仕事が自動化されつつあります。

これらの自動化を後押ししたのは、AWSを代表とするサーバの仮想化技術[いわゆるクラウド]が普及してきたことも要因です。

.. 若干インフラよりな内容になってしまった

.. orchestrationをどの辺に書くか。あの三層の図をどこに入れるか？

Immutable Infrastructure の利点
-------------------------------

自動化されるとどういうことが起きるかというと、仮想化技術を使って、壊して作りなおすことが簡単になります。自動化により、人の手による設定ミスや漏れがなくなります[特に本番環境に対して有効]。
これは、簡単にサーバを構築できるというインフラの側面だけでなく、ソフトウエアに対しても恩恵があります。
ソフトウエアのテストを行う場合を考えてみます。ひとつのサーバに開発環境が乗っかっている場合、ミドルウエアのバージョンは環境に固定されてしまいます。
このとき、新規にサーバを自動で構築してテストを行うことができるため、ミドルウエアのバージョンは自分で指定することが可能となります。

.. これやるとき、テスト書いてることが前提となっているの

.. herokuの具体例出したほうが早い？かなぁ


早速実践しよう
-------------

.. 何を目的としている？

テストを書けよ！
chef辛いという話を聞く。ansibleに鞍替えしてみたい誘惑に駆られる。
が、結局、構築したものがきちんと動いているかどうか確かめる必要がある。だから構築されているサーバに対してserverspecでテストを書くところから始めた。

ここからserverspecの実践を始める。




とりまく技術
--------------------

* 概念
 * II
 * blue-green
 * disposable
 * orchestration
 * test

* 技術
 * chef
 * ansible
 * AWS
 * docker
 * vagrant
 * fluentd
   * ログをどうするかの話
   * じゃあDBどうすんのよ。頑張れ！！！
 * Serf
   * hostsを書き換える例
 * serverspec
 * mackerel.io

