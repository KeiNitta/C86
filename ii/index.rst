
***********************************************
Immutable Infrastructureの最適解を探る(chapter用)
***********************************************


Immutable Infrastructureの最適解を探る
=====================================

失敗のないデプロイを目指して
-------------------------

* 継続的デリバリーのはなし
* II以前の世界のはなし

   * 設定が漂流する


作って壊す、そして自動化
----------------------

* PhenixServer
* 開発環境を気軽に壊してつくる
* amazonのデプロイ1000回のはなし
* この原稿での自動化の例


Immutable Infrastructure とは
-----------------------------

* IIの説明
* Blue-Green Deployment　(直接関係ないし)
* II以前の世界 (もうかいたし)
* IIの背景(もうかいたし)
* DevOps (なくていいかも)
* テスト駆動インフラ (あとにしてもいいかも。用語解説はここでいいかも)
* Immutable Infrastructure の利点(もうかいた？)
* IIの三層
  
  * Orchestration
  
    * Fabric, Capistrano, MCollective

  * Configuration

    * Puppet, Chef, AWS OpsWorks

  * Bootstrapping

    * Kickstart, Cobbler, OpenStack, AWS


早速実践しよう
-------------

* serverspec

  * serverspecとは

  * 使ってみる

  *利点

    * 本番サーバのSAN値検証に使えるので、jenkinsおじさんで１日１回まわす
    * zabbixとかと連携してみるとおもしろい？そんなことないか

* docker


  * dockerとは

     * ネットワークまわりとか、ディレクトリ関連がどうなるのかわからん。chrootでよくね？
     * FAQ形式で掘っていくのもよいかもね。じゃがいもよろしくー


  * 使ってみる


* vagrant

  *vagrantとは
  *使ってみる

*ログの管理どうする？

  *fluentdを使って収集しましょう。いつでもサーバを壊せる状態にしておきましょう。
  * Elasticsearch + kibanaでログを可視化できてはっぴー☆

* DBどうするよ？

  * 気軽に壊せないので、こわさない。以上！！

* サーバの監視どうしよう

  * 気軽にこわせて気軽に立ち上がるサーバに名前をつけると大変なことに！！！
  * サーバに名前を付けることは悪であるという議論
  * hobbitとかzabbixとかそういうツールだと登録してるホストがなくなるとデータがなくなっちゃうんだよねー過去のトレンドが消えてしまうことが問題
  * mackerelを取り上げる。



とりまく技術
--------------------

* 概念

  * DevOps
  * 継続的デリバリー

   * 一日に何回デプロイしてますか？
 
  * II
  * blue-green
  * disposable
  * orchestration
  * test
  * 構成管理をcode化するということ

* 技術

  * chef
  * ansible
  * AWS
  * docker
  * vagrant
  * fluentd

    * ログをどうするかの話
    * じゃあDBどうすんのよ。頑張れ！！！

  * Serf
 
    * hostsを書き換える例
 
  * serverspec
  * mackerel.io
  * AMIをコピーするという運用

壮大なメモ
----------

* PhenixServer : http://martinfowler.com/bliki/PhoenixServer.html

  * フェニックスサーバ。認証監査をしようと思った
   * 今動いている本番環境を再度構築しなおすことになる
   * 定期的にサーバを焼き払ったほうがいい
   * サーバは灰の中から不死鳥のように蘇る。だからフェニックスサーバという
   * 構成のズレ、アドホックな変更でサーバの設定が漂流する。SnowflakeServersにいきつく
   * このような漂流に対向するためにpuppetやchefをつかってサーバを同期し直す。
   * netflixはランダムにサーバを落として大丈夫か試している（ひー

* SnowflakeServer : http://martinfowler.com/bliki/SnowflakeServer.html

　 * スノーフレークサーバ。雪のかけらサーバという存在
 　* OSやアプリケーションにパッチを当てたりする必要がある
　 * 設定を調査すると、サーバによって微妙に違う
　 * スキー場にとっては良いが、データセンターではよくない
　 * スノーフレークサーバは再現が難しい
　 * 本番での障害を開発環境で再現させても調査できない
　
     * 参考文献・目に見えるOpsハンドブック　http://www.amazon.com/gp/product/0975568604
   
   * 芸術家はスノーフレークを好むのだそうだ　http://tatiyants.com/devops-is-ruining-my-craft/
　
     * （サーバ含めそのなかのアプリケーションも工業製品なんだよ！！！わかったか！！！（横暴
     * （昔はひとつのサーバでなんとか出来たけど、今はアクセスも増えてサーバも増えたので芸術品はいらない！！
     * （どーどー落ち着けー、なーー
　
  * スノーフレークのディスクイメージを造ればいいじゃんという議論
  * だがこのディスクイメージはミスや不要な設定も一緒に入っている
  * しかもそれを変更することもある。壊れやすさの真の理由となる（雪だけに
  * 理解や修正がしにくくなる。変更したら影響がどこに及ぶかわからない
  * そんなわけで古代のOSの上に重要なソフトウエアが動作している理由である
  * スノーフレークを避けるためにはpuppetやchefを使って動作の確認のとれたサーバを保持すること
  * レシピを使用すつと、簡単に再構築できる。または、イメージデータを作れる
  * 構成はテキストファイルだから変更はバージョン管理される

  * nologinにしてchefなどからレシピを実行すれば、変更はすべてログに残り監査に対して有効
  * 構成の違いによるバグを減らし、全く同じ環境をつくれる。また、環境の違いに起因するバグを減らせる

    * 継続的デリバリーの本に言及する　あっ

* ConfigurationSynchronization : http://martinfowler.com/bliki/ConfigurationSynchronization.html

  * あんまり重要じゃない

* ImmutableServer : http://martinfowler.com/bliki/ImmutableServer.html

  * やっともどってこれた。この文章からスノーフレークとフェニックスサーバに飛んでいる
  * Netflixが実は実戦でやってたみたい　AMIつくってそれをAWS上に展開している

    * http://techblog.netflix.com/2013/03/ami-creation-with-aminator.html
    * AMIを作るツール　https://github.com/Netflix/aminator#readme


結論
-----

最適な技術をうまく組み合わせて事故のないデプロイをしていこう。


参考文献
--------
「継続的デリバリー 信頼できるソフトウェアリリースのためのビルド・テスト・デプロイメントの自動化」アスキー・メディアワークス,2012


出発点とオチ（あとで消す
-------------------------

* この章はいわゆる格子です
* Immutable Infrastructure って言うけど、どうなの最近

  * Immutable Infrastructureとは？

* chefつらぽよなエンジニアが増えている話をきいたりしてつらぽよ

  * どのへんつらぽよ？

* 業務で本当に使えてる？

  * 結局どうなるのよ、自動化して。恩恵はあるの？

* serfとかdokkerとかansibleとかいうけど実際使えてる？
* それじゃあそれぞれ解説しましょうか

  * と思ったけどテスト大事だよね！serverspecのお話からやっていく

    * それから、chefやansibleをプラがブルに使っていく話

  * chefつらぽよ。chefについてはvol.4でやったのでそっちを参照

    * chef辛かったのでrpm化してみたけどphpのrpmを作るのがつらぽよ
    * プロジェクトごとにconfigureオプション違うし、コマンドラインでやったほうが早げ

  * ansibleどう？

    * 使い方を解説

  * Vagrantとか使ったことないけど実際どうなの？どういう環境で動作するの？どの辺がうれしい？
  * hostsの書き換えどうしてる？
  * 監視ツールに自動で突っ込んでほしいよねー
  * CI as a Serviceが現段階でのゴールのような気がする

    * 自動化最高！ヒャッハー!!
    * IT全般籐製（ウッ頭が

* 業務に応じた感じでもろもろの技術をチョイスして組み合わせて使えるといいよね！（（結論

  * 多分このへんが無難な結論だと思う

* 読者層

  * インフラ屋
  * コーダー(プログラマー
  * あらゆるものを自動化したい人

* vagrantでコード一式を構築する -> テストをする
* chefやansibleでサーバを構築する -> テストをする(serverspec)

* Immutable Infraっていうけど、結果的にオンデマンドサーバ構築って方が近い気がする

