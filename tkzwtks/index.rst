バランスwiiボードで健康管理
===============================================

はじめに
------------
どうも（たぶん）皆様初めまして。某ウェッブ企業にてweb以外のことをやってる @tkzwtks といいます。どうもどうも。
ところで皆さん、健康について真面目に考えてますか？僕は今年で31歳になったのですが、体重は100kg超です。ええ、肥満です。
さすがに最近「20代ならまだしも、30歳すぎて100kg超はまずいよなー。40になって減るとも思えないしなー」と思い始めました。遅いですね。
ふと周りを見ると「これで頑張って痩せるぞ！！」と思いながら買ったものの微妙にホコリをかぶっているバランスWiiボードが。
ということでバランスWiiボードやその他のWebサービスを使って健康管理にチャレンジです。

バランスwiiボード
^^^^^^^^^^^^^^^^^
ところで「バランスWiiボード」は皆さんご存知でしょうか。Wii/WiiUとつないで使える板状のコントローラです。

[このへんにバランスボードのしゃしん]

現在（2014年現在）だと「WiiFit U」とセットで販売されていて、遊ぶときもWiiFit Uで遊びます。
WiiFit UではバランスWiiボードの上に乗ることで体重を測ったり、ランニングっぽい何かをしたり、Wiiリモコンを持ってボクササイズ的なことができるのです。
さらに「WiiFitメーター」という万歩計的なものを使うことで「一日どれくらいの運動量があったか」を計測できるのです！
僕もこれを買うと決めた時は「これで毎日楽しく運動できる」「毎日ちょっとずつでも運動すれば痩せるぞ！」と息巻いていたのです。これは完全に余談ですがバランスwiiボードで測れる体重は136kgまでです。これも（僕にとっては）魅力的な点でした。
そうして最初はうちは頑張って毎日帰宅後にWiiUを起動し、体重を測り、ちょっとは運動してたのです。

ところが、いつくらいからだったかは全く覚えていませんが、ある時から全く乗らなくなってしまったのです。
一応今年こそ「健康になるぞ」と考えていた僕は、なぜ乗らなくなったのか理由を考えました。

* 体重を測るためにWiiUを起動しないといけない。WiiUを起動するだけではなくさらにソフトを立ち上げないといけない。

  * ディスク版を買ってしまったがゆえにマリオカート8と入れ替えるのが面倒

* 結果表示が曖昧。「太りすぎ」なんてことは十分自覚してるのでさっさと体重を教えて欲しい
* 記録したのをすぐに見られない。WiiUを起動しないと体重変化の推移を見ることができない。

リストアップしてみるとこんな理由が思い浮かびました。どれも要するに「面倒」というのが大きな理由のように思えます。
「記録するのも面倒」「結果を見るのも面倒」「つーか体重変化がどうなってるかを見たい時に見られないとかテンション下がる」みたいな感じですね。
つまり「面倒じゃない方法で」「最低でも体重だけは日々の増減が見られる」ようにすれば僕も続けらるかもしれないのです！
ということで今回は「体重を測ってWebに記録してくれる」仕組みを作ることにしました。

実際に作ってみた
------------------

概要
^^^^^^

今回は以下のようなものをつくります

[このへんに仕組みの概要図]

ご存知の方は多いと思いますが、バランスWiiボードはBluetoothでWiiUと接続し、コントローラとして使います。つまりバランスWiiボードと自宅にあるPC（今回はMacです）とつなげばバランスWiiボードの何らかのデータがとれるはずなのです。
今回はMac-バランスwiiボード間の通信に"OpenSound Control（以下OSC）"を使うことにしました。Mac用アプリケーションである「OSCulator」を利用し、OSCulatorで一旦バランスwiiボードの信号を受け、そこからOSCプロトコルで今回作るアプリケーションにデータをルーティングします。OSCulatorはWii系コントローラーとの接続に対応しており、特に何もせずにWii系コントローラーと接続して、コントローラーからのデータを受け取ることが可能です。
そしてアプリケーションではデータを受け取った後、体重を測定し、その結果を今回はFitbit.comに送信します。Fitbit.comをつかうのはWeb上で記録したものが見られるというのと、筆者がFitbit Zipを持っているというのが主な理由です。FitbitZipかわいいよFitbitZip。目標は毎日1万歩です。

OpenSound Control
^^^^^^^^^^^^^^^^^^

OpenSound Controlは、シンセサイザー等の電子楽器やコンピュータ間で、音楽の演奏データをネットワーク経由で共有するためのプロトコルです。MIDIの代替となることを目指して開発されました。OSCは簡易且つ柔軟なプロトコルのため、現在では電子楽器等だけでなく、様々なアプリケーションやハードウェアに実装されています。
OSCプロトコルは大きく分けて以下の2つのパートに分かれます。

* OSC Message

  * 「何を送るか」のラベリング
  * URLに似た形式で記述される

* OSC Arguments

  * 実際に送られる値
  * 様々な型を送信できる。また、複数の値を同時に送受信することも可能

[このへんにバランスWiiボードのOSCメッセージの例をあげる]

* バランスWiiボードで利用できるOSC Messageの例を挙げる

バランスWiiボードで実際に体重を取得する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Macと接続！
+++++++++++
ではいよいよバランスWiiボードとMacをつないで体重を測ります。つなぐ方法、と言ってもほとんどやることはありません。OSCulatorを起動し、Wiimoteタブを開き、バランスWiiボードとペアリングするだけです。この時点でバランスWiiボードからの情報はとれるので、"Quick Look"ボタンを押せばセンシングの様子を確認できます。
  
データを受け取るアプリケーションを作る
++++++++++++++++++++++++++++++++++++++++++++
次はデータを受け取るためのアプリケーションを作ります。できるだけ簡単に作りたい、という気持ちもあり今回はnode.jsで作りました。node.jsのインストールだとか細かいお話については別の人や既に発売中の書籍に任せることにします。ググればすぐに出てくると思います。今回はnode.jsの開発環境がある程度揃っている前提でお話を進めることにします。
OSCulatorからRoutingされるデータを受け取るために、node.jsでUDPサーバーを立てて、それでOSC通信を行います。と言っても受信するだけですけど。
また、node.jsでOSCメッセージを処理するためにosc-min [#oscmin]_ というモジュールを作っている人がいるのでそれを利用します。

.. code-block:: console

   $ npm install osc-min


これでnode-osc-minを使う準備が出来ました。実際にコードを書いてみます。OSCulatorでRoutingされたメッセージを受信するためのコードはこんな感じです。

.. code-block:: javascript

   var osc = require('osc-min');
   var udp = require('dgram');
   
   sock = udp.createSocket("udp4", function(msg, rinfo) {
     var error;
     try {
         return console.log(osc.fromBuffer(msg));
     } catch (_error) {
         error = _error;
         return console.log("invalid OSC packet");
     }
   });

   sock.bind(9999);

こんな感じです。と言うよりはサンプルそのままです。これを実行するとUDPのサーバーを立ちあがり、OSCのパケットを受信できるようになります。実際に受信すると、コンソールに受信されたOSCメッセージが出力されます。上のコードでOSCに関連するコードは7行目の

.. code-block:: javascript

   osc.fromBuffer(msg)

だけです。このAPIは受け取ったパケットをJSONに変換してくれるものです。これでバランスWiiボードのデータが取れるようになりました。簡単ですね？

.. rubic:: Footnotes

.. [#oscmin] https://github.com/russellmcc/node-osc-min

Fitbitに記録
++++++++++++
             
いざ計測！
+++++++++++
ここまでで体重を測ってデータを記録する前の段階まで準備ができました。そこで早速上に乗って値を取ってみようかな、と思った所、問題が2つあることに気づきました

1. まだ上に乗っていないのに0ではない数字が送られてきている
2. 体重を確定する方法

1については、このままでは実際に乗った時に精度の高い数字を測ることができている、とは言えません。ということで初期化作業として、最初に送られてきたデータ10個の値の平均値を計算し、それを測定後の数字から引くことにしました。

2は今回の仕組みのなかでもかなり重要な問題です。一般のデジタル体重計がどうやって体重を確定させているのか、ということをちょっと調べてみましたがそれっぽい資料は出てきません。うーんうーんと悩みましたが、今回は、体重測定を開始してから10秒後に取れた数字を体重として利用することにしました。もっともっと精度の高い方法があるのかもしれませんが、僕しか使わない（予定）なので今回はこれでOKということにしましょう。

体重についても、ただただコンソールを流れる数字を眺めていても面白くないですし、フォントが小さくて [#smallfont]_ 目が悪くなりそうですし、せっかく（？）node.jsを使っているのでWebページを作ってそこで数字を表示することにしました。node.js + express + socket.io の組み合わせで、数字が動く様子を見られるようにしたり、「体重測定開始」ボタンをつけたり、10秒のカウントダウンが出来るようにしました。socket.ioについてはこの本でも別の人が触れているのでそちらを参考にしてください。これで色々体重測定は楽になりました！

[このへんにwebページ画像]

.. rubic:: Footnotes

.. [#smallfont] 「フォントサイズを大きくすればええやろ」まあその通りですね・・・

実践！ダイエット！
==================

健康管理のためにとにかく記録する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ここからは実践編です。「健康管理」というからには体重以外も記録してあとで眺めるのがいいような気がします。ということで運動についてはFitbitとRunkeeper [#runkeeper]_ を利用することにしました。筆者はちょうど最近新しい自転車を買ったばかりで、2km以上の距離で自転車に乗るときはRunkeeperのiPhoneアプリを利用して走行した距離、走行ルート等を記録することにしました。FitbitZipも併用して自転車についてはRunkeeper、普段の運動（歩いたり）についてはFitbitを利用して記録しました。

一方で食事についてはどうしても手動で記録、というようにせざるを得ません。写真を撮ったら「今日なにたべた？」みたいなのが記録される夢のような世界に行きたいとは思うのですがまあ難しい。ということで何を食べたかについてはEvernoteに書いていくことにしました。Fitbitにも食事を記録する機能はあって、且つカロリーもいい感じに記録できるのですが、日本語で記録できない、既存のものを記録するときは英語じゃないと検索不可等のめんどくさすぎる問題があるので今回は不採用です。実は昔カロリーと食事内容を同時に記録していたことがあったのですが、カロリーを調べて記録するのがこれまためんどくさくなってやめてしまったというのがあり、あまりいい思い出ではないので「ただ食べたものを記録するだけ」にしました。

.. rubic:: Footnotes

.. [#runkeeper] http://runkeeper.com

その他やってみたこと
^^^^^^^^^^^^^^^^^^^^^
記録するだけでは過去の状態を確認することしかできません。今回は「少しでも痩せる」ことが目的なので体重を減らす方法を考える必要があります。
そこで以下のルールを決めることにしました。

* 炭水化物の量を減らす

  * 特に夜はできるだけ炭水化物じゃないものを食べる
    
* 飲み会がある、天気が悪い以外の日は自転車で通勤するようにする

筆者は炭水化物的食べ物が好きで、特に米を食べまくっていたのですが、まあよくないよねということでこれを減らす努力をすることにしました。ただいきなりゼロに出来るほどメンタルは強くないので、「意識的に拒絶する」程度のことをやることにしました。具体的には「今まで大盛りを頼んでいたけど普通か少量にする」とか「夜はご飯とか食べないようにする」とか、「おかわりしようと思ったけどやめとくかな」くらいの軽い感じのものです。しかしこれは今後のためにも良かったなあと今では思っています。

体重に影響を与えるものの考察
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

結論
--------

* ある環境だと体重が一番落ちることが判明した

  * 天気や食事、仕事時間の関係
  * 運動するのに適した時間や強度、運動時間

* モチベーションを落とさずにやる方法はこれだ！！とかあるといいな
* ダブルピース写真ももれなく必要
