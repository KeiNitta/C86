バランスwiiボードで健康管理
===============================================

はじめに
------------
どうも（たぶん）皆様初めまして。某ウェッブ企業にてweb以外のことをやってる @tkzwtks といいます。どうもどうも。
ところで皆さん、健康について真面目に考えてますか？僕は今年で31歳になったのですが、体重は100kg超です。ええ、肥満です。
さすがに最近「20代ならまだしも、30歳すぎて100kg超はまずいよなー。40になって減るとも思えないしなー」と思い始めました。遅いですね。
ふと周りを見ると「これで頑張って痩せるぞ！！」と思いながら買ったものの微妙にホコリをかぶっているバランスWiiボードが。
ということでバランスWiiボードやその他のWebサービスを使って健康管理にチャレンジです。

バランスwiiボード
^^^^^^^^^^^^^^^^^
ところで「バランスWiiボード」は皆さんご存知でしょうか。Wii/WiiUとつないで使える板状のコントローラです。

.. figure:: img/barance_wii_board.eps
  :width: 600px
  :align: center

  ホコリかぶってたバランスWiiボード
          
現在（2014年現在）だと「WiiFit U」とセットで販売されていて、遊ぶときもWiiFit Uで遊びます。
WiiFit UではバランスWiiボードの上に乗ることで体重を測ったり、ランニングっぽい何かをしたり、Wiiリモコンを持ってボクササイズ的なことができるのです。
さらに「WiiFitメーター」という万歩計的なものを使うことで「一日どれくらいの運動量があったか」を計測できるのです！
僕もこれを買うと決めた時は「これで毎日楽しく運動できる」「毎日ちょっとずつでも運動すれば痩せるぞ！」と息巻いていたのです。これは完全に余談ですがバランスwiiボードで測れる体重は136kgまでです。これも（僕にとっては）魅力的な点でした。
そうして最初はうちは頑張って毎日帰宅後にWiiUを起動し、体重を測り、ちょっとは運動してたのです。

ところが、いつくらいからだったかは全く覚えていませんが、ある時から全く乗らなくなってしまったのです。
一応今年こそ「健康になるぞ」と考えていた僕は、なぜ乗らなくなったのか理由を考えました。

* 体重を測るためにWiiUを起動しないといけない。WiiUを起動するだけではなくさらにソフトを立ち上げないといけない。

  * ディスク版を買ってしまったがゆえにマリオカート8と入れ替えるのが面倒

* 結果表示が曖昧。「太りすぎ」なんてことは十分自覚してるのでさっさと体重を教えて欲しい
* 記録したのをすぐに見られない。WiiUを起動しないと体重変化の推移を見ることができない。

リストアップしてみるとこんな理由が思い浮かびました。どれも要するに「面倒」というのが大きな理由のように思えます。
「記録するのも面倒」「結果を見るのも面倒」「つーか体重変化がどうなってるかを見たい時に見られないとかテンション下がる」みたいな感じですね。
つまり「面倒じゃない方法で」「最低でも体重だけは日々の増減が見られる」ようにすれば僕も続けらるかもしれないのです！
ということで今回は「体重を測ってWebに記録してくれる」仕組みを作ることにしました。

実際に作ってみた
------------------

概要
^^^^^^

ご存知の方は多いと思いますが、バランスWiiボードはBluetoothでWiiUと接続し、入力デバイスとして使うことが可能です。つまりバランスWiiボードと自宅にあるPC（今回はMacです）とつなげばバランスWiiボードの何らかのデータがとれるはずなのです。
今回はMac-バランスwiiボード間の通信に"OpenSound Control（以下OSC）"を使うことにしました。Mac用アプリケーションであるOSCulator [#osculator]_ を利用し、OSCulatorで一旦バランスwiiボードの信号を受け、そこからOSCプロトコルで今回作るアプリケーションにデータをルーティングします。OSCulatorはWii系コントローラーとの接続に対応しており、特に何もせずにWii系コントローラーと接続して、コントローラーからのデータを受け取ることが可能です。
そしてアプリケーションではデータを受け取った後、体重を測定し、その結果を今回はFitbit.com [#fitbit]_ に送信します。Fitbit.comをつかうのはWeb上で記録したものが見られるというのと、筆者がFitbitZipを持っているというのが主な理由です。FitbitZipかわいいよFitbitZip。目標は毎日1万歩 [#ichiman]_ です。

.. figure:: img/osculator.eps
    :scale: 50%
    :align: center

    OSCulatorの画面

.. [#osculator] http://www.osculator.net/
.. [#fitbit] https://www.fitbit.com/                
.. [#ichiman] 一日中座ってるような仕事なので一万歩は結構きついんですよね
              
OpenSound Control
^^^^^^^^^^^^^^^^^^

OpenSound Control [#osc]_ は、シンセサイザー等の電子楽器やコンピュータ間で、音楽の演奏データをネットワーク経由で共有するためのプロトコルです。MIDIの代替となることを目指して開発されました。OSCは簡易且つ柔軟なプロトコルのため、現在では電子楽器等だけでなく、様々なアプリケーションやハードウェアに実装されています。
OSCプロトコルは大きく分けて以下の2つのパートに分かれます。

* OSC Message

  * 「何を送るか」のラベリング
  * URLに似た形式で記述される

* OSC Arguments

  * 実際に送られる値
  * 様々な型を送信できる。また、複数の値を同時に送受信することも可能

実際にOSCulator経由で送られてくるメッセージはこんな感じです。

.. code-block:: javascript
   
   { address: '/wii/1/balance/0',
     args: [ { type: 'float', value: 0.028555890545248985 } ],
     oscType: 'message' }  // bottom left
   { address: '/wii/1/balance/1',
     args: [ { type: 'float', value: 0.0472947433590889 } ],
     oscType: 'message' }  // bottom right
   { address: '/wii/1/balance/2',
     args: [ { type: 'float', value: 0.02895377203822136 } ],
     oscType: 'message' }  // top left
   { address: '/wii/1/balance/3',
     args: [ { type: 'float', value: 0.041941456496715546 } ],
     oscType: 'message' }  // top right
   { address: '/wii/1/balance/4',
     args: [ { type: 'float', value: 0.004130267538130283 } ],
     oscType: 'message' }  // sum 
   { address: '/wii/1/balance/5',
     args: [ { type: 'float', value: 0.49813568592071533 } ],
     oscType: 'message' }  // virtual x
   { address: '/wii/1/balance/6',
     args: [ { type: 'float', value: 0.5018643140792847 } ],
     oscType: 'message' }  // virtual y

OSCulatorは何もせずともWiiリモコンデバイスに対応しているため、OSCulator上では各メッセージにラベルをつけてくれています。
バランスWiiボードには4つのバランスセンサー（ひずみゲージ）が内蔵されている [#barance_sensor]_  [#barance_hizumi]_ とのことなので、0番から3番は各センサの値だと考えられます。4番はsumの名前の通り、4つのセンサの合計値だと思われます。5番と6番は、各センサにかかる力から計算した仮想の重心位置だろうと思われます。今回は4番の"sum"の値を使うことにします。

.. [#osc] http://opensoundcontrol.org/
.. [#barance_sensor] 「4つのバランスセンサー搭載」みたいなことが取扱説明書に書いてあった
.. [#barance_hizumi] Wikipediaに書いてあった
          
バランスWiiボードで実際に体重を取得する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Macと接続！
+++++++++++
ではいよいよバランスWiiボードとMacをつないで体重を測ります。つなぐ方法、と言ってもほとんどやることはありません。OSCulatorを起動し、Wiimoteタブを開き、バランスWiiボードとペアリングするだけです。この時点でバランスWiiボードからの情報はとれるので、"Quick Look"ボタンを押せばセンシングの様子を確認できます。
  
データを受け取るアプリケーションを作る
++++++++++++++++++++++++++++++++++++++++++++
次はデータを受け取るためのアプリケーションを作ります。できるだけ簡単に作りたい、という気持ちもあり今回はnode.jsで作りました。node.jsのインストールだとか細かいお話については別の人や既に発売中の書籍に任せることにします。ググればすぐに出てくると思います。今回はnode.jsの開発環境がある程度揃っている前提でお話を進めることにします。
OSCulatorからRoutingされるデータを受け取るために、node.jsでUDPサーバーを立てて、それでOSC通信を行います。と言っても受信するだけですけど。
また、node.jsでOSCメッセージを処理するためにosc-min [#oscmin]_ というモジュールを作っている人がいるのでそれを利用します。

.. code-block:: console

   $ npm install osc-min


これでnode-osc-minを使う準備が出来ました。実際にコードを書いてみます。OSCulatorでRoutingされたメッセージを受信するためのコードはこんな感じです。

.. code-block:: javascript

   var osc = require('osc-min');
   var udp = require('dgram');
   sock = udp.createSocket("udp4", function(msg, rinfo) {
     var error;
     try {
         return console.log(osc.fromBuffer(msg));
     } catch (_error) {
         error = _error;
         return console.log("invalid OSC packet");
     }
   });
   sock.bind(9999);

こんな感じです。と言うよりはサンプルそのままです。これを実行するとUDPのサーバーを立ちあがり、OSCのパケットを受信できるようになります。実際に受信すると、コンソールに受信されたOSCメッセージが出力されます。上のコードでOSCに関連するコードは7行目の

.. code-block:: javascript

   osc.fromBuffer(msg)

だけです。このAPIは受け取ったパケットをJSONに変換してくれるものです。これでバランスWiiボードのデータが取れるようになりました。簡単ですね？

.. [#oscmin] https://github.com/russellmcc/node-osc-min

いざ計測！
+++++++++++
ここまでで体重を測ってデータを記録する前の段階まで準備ができました。そこで早速上に乗って値を取ってみようかな、と思った所、問題が2つあることに気づきました

1. まだ上に乗っていないのに0ではない数字が送られてきている
2. 体重を確定する方法

1については、このままでは実際に乗った時に精度の高い数字を測ることができている、とは言えません。ということで初期化作業として、最初に送られてきたデータ10個の値の平均値を計算し、それを測定後の数字から引くことにしました。

2は今回の仕組みのなかでもかなり重要な問題です。一般のデジタル体重計がどうやって体重を確定させているのか、ということをちょっと調べてみましたがそれっぽい資料は出てきません。うーんうーんと悩みましたが、今回は、体重測定を開始してから10秒後に取れた数字を体重として利用することにしました。もっともっと精度の高い方法があるのかもしれませんが、僕しか使わない（予定）なので今回はこれでOKということにしましょう。

体重についても、ただただコンソールを流れる数字を眺めていても面白くないですし、フォントが小さくて [#smallfont]_ 目が悪くなりそうですし、せっかく（？）node.jsを使っているのでWebページを作ってそこで数字を表示することにしました。node.js + express + socket.io の組み合わせで、数字が動く様子を見られるようにしたり、「体重測定開始」ボタンをつけたり、10秒のカウントダウンが出来るようにしました。socket.ioについてはこの本でも別の人が触れているのでそちらを参考にしてください。これでバランスWiiボードとMacを利用して体重が測れるようになりました！

[このへんにwebページ画像]

.. [#smallfont] 「フォントサイズを大きくすればええやろ」まあその通りですね・・・

Fitbitに記録
++++++++++++
つぎにFitbitに記録をする準備をします。FitbitはRESTfulなAPIを公開していて、各種リソースにAPI経由でアクセスすることができます。 [#fitbit_dev]_ 当然ではありますが記録されている値を取得するだけでなく、記録自体も可能です。Fitbit APIを利用するためには、OAuthによる認証が必須です。OAuthに関しての詳細な説明はここでは省きますが、FitbitAPIのドキュメントにあった図 [#fitbit_oauth]_ は結構わかりやすい気がしたので参考にしてはいかがでしょうか。

アプリケーションからOAuth認証可能にするため、https://dev.fitbit.com でアプリケーションを登録します。fitbitにログイン後、dev.fitbit.com内の"REGISTER AN APP"にて必要事項を入力します。ここで重要なのは"Callback URLの項です。ここにはアプリケーションのユーザーがfitbitでの認証後に戻ってくるURLを指定するのですが、今回は自分のローカル環境で動かすという理由もあり、"http://localhost:3000/callback" のようなURLを指定します [#callback]_ 。登録が終わると、"Consumer Key"と"Consumer Secret"が払い出されるので、それをアプリケーションで利用します。まずはnodeでoauthを使うための準備です。

.. code-block:: javascript

   var oauth = require('oauth').OAuth;
   var oa = new oauth(
      "https://api.fitbit.com/oauth/request_token",
      "https://api.fitbit.com/oauth/access_token",
      "CONSUMER_KEY",
      "CONSUMER_SECRET",
      "1.0",
      null,
      "HMAC-SHA1"
   );

node-oauth [#node-oauth]_ をつかいます。CONSUMER_KEY/CONSUMER_SECRETは先ほど払いだされたものを利用します。リクエストトークン要求処理はこんな感じ。

.. code-block:: javascript

   router.get('/authorize', function(req, res) {
   oa.getOAuthRequestToken(
       function(error, oauth_token, oauth_token_secret, results) {
          if(error) {
            res.send("error");
        } else {
        req.session.oauth = {};
        req.session.oauth.token = oauth_token;
        req.session.oauth.token_secret = oauth_token_secret;
        res.redirect(
         "http://www.fitbit.com/oauth/authorize?oauth_token="
         + oauth_token);
      }
    });
   });

最後に、ユーザーがfitbitで認証後に戻ってきた後のアクセストークン要求処理はこんな感じです。

.. code-block:: javascript

   router.get('/callback', function(req, res) {
       if (req.session.oauth) {
          req.session.oauth.verifier = req.query.oauth_verifier;
          var oauth_session = req.session.oauth;
          oa.getOAuthAccessToken(oauth_session.token,
                                 oauth_session.token_secret,
                                 oauth_session.verifier,
                function(error, oauth_access_token,
                         oauth_access_token_secret, results) {
                         if (error) {
                            res.send("error");
                         } else {
                            req.session.oauth.access_token
                                         = oauth_access_token;
                            req.session.oauth.access_token_secret
                                         = oauth_access_token_secret;
                            req.session.fitbit = results;
                            res.redirect("/");
                        }
                    });
                }
          });

認証後はaccess_tokenとaccess_token_secretをセッションに保存するなりして、実際にAPIを利用する時に使います。実際に体重を記録したり、体重のログを見たりする処理はこんな感じです。

.. code-block:: javascript

   // 体重更新
   oa.post(
      'https://api.fitbit.com//1/user/-/body/log/weight.json',
      req.session.oauth.access_token,
      req.session.oauth.access_token_secret,
      {
        "weight": weight,
        "date": posted_date
      },
      function (err, data, response) {
        if (err) {
          res.send('too bad.' + JSON.stringify(err));
        } else {
          res.send("good");
        }
      });

   // 記録済みの体重取得
   oa.get(
      'https://api.fitbit.com/1/user/-/body/log/weight/date/2014-07-01.json',
      req.session.oauth.access_token,
      req.session.oauth.access_token_secret,
      function (err, data, response) {
        if (err) {
          res.send('too bad.' + JSON.stringify(err));
        } else {
          console.log(response);
          res.send(data);
        }
   });

その他どんなAPIがあるかはドキュメントをご参照ください。こんな感じで記録していきます。

.. [#fitbit_dev] https://dev.fitbit.com/
.. [#fitbit_oauth] https://wiki.fitbit.com/display/API/OAuth+Authentication+in+the+Fitbit+API このへんです
.. [#callback] "callback"のとこは別になんでもいいです
.. [#node-oauth] https://github.com/ciaranj/node-oauth

実践！ダイエット！
------------------

健康管理のためにとにかく記録する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ここからは実践編です。「健康管理」というからには体重以外も記録してあとで眺めるのがいいような気がします。ということで運動についてはFitbitとRunkeeper [#runkeeper]_ を利用することにしました。筆者はちょうど最近新しい自転車を買ったばかりで、2km以上の距離で自転車に乗るときはRunkeeperのiPhoneアプリを利用して走行した距離、走行ルート等を記録することにしました。FitbitZipも併用して自転車についてはRunkeeper、普段の運動（歩いたり）についてはFitbitを利用して記録しました。

一方で食事についてはどうしても手動で記録、というようにせざるを得ません。写真を撮ったら「今日なにたべた？」みたいなのが記録される夢のような世界に行きたいとは思うのですがまあ難しい。ということで何を食べたかについてはEvernoteに書いていくことにしました。Fitbitにも食事を記録する機能はあって、且つカロリーもいい感じに記録できるのですが、日本語で記録できない、既存のものを記録するときは英語じゃないと検索不可等のめんどくさすぎる問題があるので今回は不採用です。実は昔カロリーと食事内容を同時に記録していたことがあったのですが、カロリーを調べて記録するのがこれまためんどくさくなってやめてしまったというのがあり、あまりいい思い出ではないので「ただ食べたものを記録するだけ」にしました。

.. [#runkeeper] http://runkeeper.com


他にやってみたこと
^^^^^^^^^^^^^^^^^^^^^
記録するだけでは過去の状態を確認することしかできません。実は本格的に記録をつけはじめたのは7月に入ってからだったのですが、はじめの一週間については多少は意識していたものの思った以上の効果が出なかったので、改めて記録を見てちょっと反省して、以下のことを意識するようにしました。

* 炭水化物の量を減らす

  * 特に夜はできるだけ炭水化物じゃないものを食べる

* 普段はできるだけ水かお茶を飲む

今回は「少しでも痩せる」ことが目的なので体重を減らす方法を考える必要があります。  
筆者は炭水化物的食べ物が好きで、特に米を食べまくっていたのですが、やっぱりよくないよね、ということでこれを減らす努力をすることにしました。ただいきなりゼロに出来るほどメンタルは強くないので、「意識的に拒絶する」程度のことをやることにしました。具体的には「今まで大盛りを頼んでいたけど普通か少量にする」とか「夜はご飯とか食べないようにする」とか、「おかわりしようと思ったけどやめとくかな」くらいの軽い感じのものです。飲み物についても、普通の人からすると当然のことかもしれませんが、筆者は無意識のうちに甘い飲み物を飲んでしまうことが多かったので、意識して水とかお茶を飲むようにしました。

体重に影響を与えるものの考察
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

結果
--------
多少短いような気もしますが、7月1日から7月19日までの約三週間での結果はこんな感じです。

.. figure:: img/fitbit_weight.eps
    :scale: 50%
    :align: center

    体重の変化


体重を測った時間はだいたい10時から11時頃です。結果的には7/1時点で121.8kgあったものが、7/19で118.3kgとなり、開始時点よりも3.5kg減っているので（この期間で見ると）一応成功、ということにしたいと思います [#gosa]_ 。とはいえ結果だけ見ると思ったより増減しているなあという印象です。運動のグラフを見てみると、1万歩を超えている日が何日かあります。この期間基本的には徒歩移動がほとんどで、体を動かしたという意味では7/4にフットサル、7/7に自転車で往復24km走った程度のことだけでした。自転車についてはもう少し乗っていたつもりだったのですが、記録が全てを物語っていました・・・。体重の変化と運動のグラフを合わせてみると、フットサルで2時間程度、少し激し目の運動をした翌日の7/8は少し減少しています。また、自転車で24kmを往復した翌日の7/8の測定でも多少減少していました。一方、普通に歩くだけで1万歩を超えたような日の翌日は特に変化なし、もしくは少しだけ体重が増加していました。1万歩歩くだけでは特に効果はなかったようです・・・

一方、食事面から見てみます。期間中の食事についてはここに書くとかなりの量になってしまうので、興味のある方は以下のURLからご覧ください。ここでは大まかなサマリーだけ書くことにします。

.. csv-table:: 期間中の食事まとめ
   :header: "期間", "朝食回数", "昼食回数", "夕食回数", "飲み会", "その他"
   :widths: 10, 5, 5, 5, 5, 30

   "7/1 ~ 7/7", 5, 7, 3, 3, "ご飯等の炭水化物多目。飲み会も多かった"
   "7/8 ~ 7/14", 4, 7, 4, 1, "夕食にコンビニの「サラダボウル」と「サラダチキン」を食べるようにした。健康診断があった週だった。"
   "7/15 ~ 7/21", 6, 7, 6, 1, "夜は炭水化物は食べないようにして、できるだけ軽くするように意識した"

改めて見ると、飲みに行く回数がかなり多かったように思います。元々飲みに行くと決まっている日は自転車にも乗らないので、運動する可能性まで失ってしまいました。会社に行く時だけ自転車に乗って、帰りは置いてこればよかったのではとちょっと反省しています。
全体を俯瞰してみると、基本的に三食食べていたようです。1週目は多少意識はしていたもののほとんど努力していなかったので、ほとんど食事による効果はなかったのではと考えています。グラフを見ても、一瞬何らかの理由（なぜかはよくわからない）でガクッと下がった後、結局一週間終わるころには体重は元に戻っていました。そこで2週目以降は夕食に炭水化物を食べないようにしてみようと考え、できるだけサラダを食べるようにし始めました。夕食に食べていたのは、セブンイレブンの「彩り野菜のサラダボウル」という商品です。かなりの量の野菜が入っているため、思った以上に満足感がありました。
この週も一度飲みに行きましたが、サラダを積極的に食べていた結果か少し体重が減少していました。3週目も同じように過ごしました。

思ったより大変だったのは家族と一緒の週末の食事、それも夕食でした。平日は時間がすれ違うことが多く、筆者は一人で夕食を食べていたので問題ありませんでしたが、週末の夕食は家族と一緒に食べることがほとんどで、結果的に炭水化物を食べたりしてしまい、平日の努力を無駄にしてしまったのは反省点で、これについては今後家族の協力も必要なのかなと感じました。とはいえ思いっきり戻ったわけではなかったのが不幸中の幸いだなと思います。
しかし食事に気を使い始めてからの減少量が一番多かったようにも思えます。

結果の考察
----------------
ここまでのことを踏まえて、以下のような考察をしました

* 短期的に最も体重の増減に対してインパクトがあるのは食事

  * もっと長いスパンで見たら食事以外のことのほうが影響大かもしれない

* 短時間で激しい運動をすると翌日に多少の効果が現れる。徒歩等の軽めの運動を長くやる、とかだと効果はそこまで大きく無い
  
  * 多少は効果があるように見えるのでできるだけ歩く等の軽めの運動は継続すべきではある

現段階の体重では、おそらくいちばん効果があるのは食事を減らすことではないか、と思います。夕食の炭水化物を減らしただけで（外見からして誤差っぽいけど）数字の上では減っていることが確認できました。一方で運動については期間が短すぎてあまり効果がでなかったのでは、と考えています。まあちょっと運動しただけで劇的な効果が出たらそれはそれで怖いですね・・・とはいえ太りにくい体を作るためには、基礎代謝を上げるとかしないとだめで、そのためにも運動をする習慣をきちんと付けないとダメだなあと思います。今後も少しでも運動を継続していきたいです。
  
おわりに
------------------
今回は眠っていたバランスWiiボードを引っ張りだしてきて、Macとつないで体重計代わりにして、さらにFitbitAPIを利用して記録するということをやりました。また、実際に2週間弱のダイエットに挑戦して、ほんのちょっとですが体重を減らすことができました。
今回のダイエットはたぶん「レコーディングダイエット」的なやつだと思います。私はレコーディングダイエットに対して「そんなことで減るわけないだろ」みたいなことを考えていましたが、コツコツと記録をして後で反省するのは正しいんですね。反省しました。余談ですが、ダイエットを継続するのは結構大変で、毎回途中で嫌になってしまうのですが、今回この原稿を書くに当たって多少なりとも結果を出さねばというのがかなりモチベーションになりました。人に結果を見せなくてはならない状況に追い込むといい感じに継続出来るかもしれません。あとなによりも、いきなり色々厳し目の制約をつけると途中で嫌になってやめてしまう、なんてことも多いと思います。できることから少しづつやっていきましょう。

.. [#gosa] 「お前の元の体重からするとほとんど誤差だろ」と言われりゃまあそうかもしれないけど減ったからOK！！！！！！！
